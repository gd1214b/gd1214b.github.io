<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.gd1214b.icu</id>
    <title>gd1214b&apos;s blog</title>
    <updated>2021-06-20T07:31:41.846Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.gd1214b.icu"/>
    <link rel="self" href="https://blog.gd1214b.icu/atom.xml"/>
    <subtitle>念念不忘，必有回响</subtitle>
    <logo>https://blog.gd1214b.icu/images/avatar.png</logo>
    <icon>https://blog.gd1214b.icu/favicon.ico</icon>
    <rights>All rights reserved 2021, gd1214b&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[利用GitHub Actions 监控网站- Upptime]]></title>
        <id>https://blog.gd1214b.icu/post/G9dquz6bG/</id>
        <link href="https://blog.gd1214b.icu/post/G9dquz6bG/">
        </link>
        <updated>2021-06-20T05:52:12.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本文转自：<a href="https://annkuoq.github.io/blog/2021-01-09-uptime-monitor-and-status-website-service-with-upptime/">https://annkuoq.github.io/blog/2021-01-09-uptime-monitor-and-status-website-service-with-upptime/</a></p>
</blockquote>
<p>前阵子在网络上看到一个很酷的开源项目： <a href="https://github.com/upptime/upptime">Upptime</a></p>
<p>每隔一段时间用GitHub Actions 看网站有没有挂掉,若挂掉就用GitHub Issues 回报异常事件,使用GitHub Pages 产生服务状态的页面.</p>
<h1 id="github-actions-简介">GitHub Actions 简介</h1>
<p>GitHub Actions是GitHub上的一个自动化服务，你可以把脚本放到上面，当特定事件发生时，自动执行你的脚本。</p>
<p>以Upptime来说，预设是每隔五分钟访问你的网站一次（实际上由于GitHub的限制，间隔可能会更长），同时也会记录每次的response time，让你在页面上看历史纪录等等。</p>
<p>这些动作都写在Actions的脚本中，机器都会自己执行，完全不用动到一根指头。</p>
<p>目前Actions支援Windows, macOS, Linux三种环境，然后额度的话，如果是免费个人帐户</p>
<p>在Linux 上，一个月有2000 分钟的执行时间<br>
在Windows 上，用1 分钟会消耗2 分钟的额度(Linux 的两倍)<br>
在macOS 上，用1 分钟会消耗10 分钟的额度(Linux 的十倍)<br>
当然你也可以用自己的机器运行</p>
<p>不过！<br>
<strong>如果你的Repo设为公开的话，就可以免费使用Actions，既然用免费的，就要有某天要付钱的觉悟。</strong></p>
<p>大概介绍完之后，就来开始装Upptime吧。</p>
<h1 id="创建github-repo">创建GitHub Repo</h1>
<ol>
<li>进入Upptime的<a href="https://github.com/upptime/upptime">repo</a></li>
<li>点击 <strong>Use this template</strong><br>
<img src="https://blog.gd1214b.icu/post-images/1624168642287.png" alt="" loading="lazy"></li>
<li>创建repo<br>
* 输入repo name<br>
* 勾选 <strong>Include all branches</strong><br>
* 点击 <strong>Create repository from temple</strong></li>
</ol>
<p><img src="https://blog.gd1214b.icu/post-images/1624168745412.png" alt="" loading="lazy"><br>
等一阵子后,就会复制一样的repo到你的帐号下</p>
<h1 id="设置github-pages">设置GitHub Pages</h1>
<ol>
<li>到你的repo，点击 <strong>Settings</strong><br>
<img src="https://blog.gd1214b.icu/post-images/1624168798869.png" alt="" loading="lazy"></li>
<li>往下找到GitHub Pages 的<strong>Source</strong></li>
</ol>
<ul>
<li>Branch 设为 <strong>gh-pages</strong></li>
<li>点击 <strong>Save</strong></li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://blog.gd1214b.icu/post-images/1624168860771.png" alt="" loading="lazy"></figure>
<h1 id="设置repository-secret">设置Repository Secret</h1>
<p>为了让Upptime有commit和publish网页的权限，需要设定Personal Access Token</p>
<ol>
<li>点击自己的<strong>Profile picture</strong> &gt; <strong>Settings</strong><br>
<img src="https://blog.gd1214b.icu/post-images/1624168921775.png" alt="" loading="lazy"></li>
<li>点击左侧的<strong>Developer settings</strong> &gt; <strong>Personal access tokens</strong> &gt; <strong>Generate new token</strong></li>
</ol>
<p><img src="https://blog.gd1214b.icu/post-images/1624168964700.png" alt="" loading="lazy"><br>
3. 新增token</p>
<ul>
<li>Note: <strong>upptime</strong></li>
<li>Select scopes:勾选<strong>repo</strong>和<strong>workflow</strong></li>
<li>点击 <strong>Generate token</strong></li>
</ul>
<p><img src="https://blog.gd1214b.icu/post-images/1624169013442.png" alt="" loading="lazy"><br>
4. 复制这段很长的token</p>
<p><img src="https://blog.gd1214b.icu/post-images/1624169029896.png" alt="" loading="lazy"><br>
5. 返回<strong>repo</strong> &gt;<strong>Settings</strong><br>
点击左侧<strong>Secrets</strong>&gt; <strong>Add a new secret</strong> &gt; <strong>New repository secret</strong><br>
<img src="https://blog.gd1214b.icu/post-images/1624169066911.png" alt="" loading="lazy"><br>
6. 设定repo 的token</p>
<ul>
<li>Name: <strong>GH_PAT</strong></li>
<li>Value: 贴上刚刚复制的 <strong>token</strong></li>
<li>点击 <strong>Add secret</strong><br>
<img src="https://blog.gd1214b.icu/post-images/1624169109524.png" alt="" loading="lazy"></li>
</ul>
<h1 id="更新yaml文件">更新YAML文件</h1>
<p>Upptime使用.yml来做“集中式设置”，只要更改这个文件的设置，所有相关代码就会一起修改。</p>
<ol>
<li>到你的repo，点击<strong>Code</strong> &gt; <strong>.upptimerc.yml</strong></li>
</ol>
<p><img src="https://blog.gd1214b.icu/post-images/1624169199844.png" alt="" loading="lazy"><br>
2. 点击铅笔按钮编辑文件<br>
3. 按照以下模版修改此文件：(方括号内是需要修改的内容，修改完之后请删除方括号)</p>
<pre><code class="language-yaml">#你的GitHub username 
owner: 【GitHub username】

#你的GitHub repo name 
repo: 【repo name】

#加入要监控的网站名称与URL ,可以添加多个网站
sites: 
  - name: 【网站名称】
    url: 【URL】

#没有域名的按照以下模版填写
status-website: 
    #cname: demo.upptime.js.org (移除) 
    baseUrl: /upptime

#有域名的按照以下模版填写
status-website: 
    cname: 【你的域名】
    
#自定义状态页面的navbar名称与链接
navbar: 
    - title: 【名称】
      href: 【链接】
</code></pre>
<h1 id="查看github-actions">查看GitHub Actions</h1>
<p>设定好.yml后，Actions就会自动开始运行(黄圈在转)。运行成功会显示绿色的勾，运行失败会显示红色的叉。<br>
<img src="https://blog.gd1214b.icu/post-images/1624169705043.png" alt="" loading="lazy"><br>
如果发现Actions没运行，或是想要让它马上执行，就点击左侧的<strong>Setup CI</strong>&gt; <strong>Run workflow</strong> &gt; <strong>Run workflow</strong><br>
<img src="https://blog.gd1214b.icu/post-images/1624169731129.png" alt="" loading="lazy"></p>
<h1 id="查看status-website">查看Status Website</h1>
<p>你的状态页面URL是:https://【user_name】.github.io/【repo_name】/<br>
或是可以到<strong>repo</strong> &gt; <strong>Settings</strong> &gt; <strong>GitHub Pages</strong>查看URL</p>
<p>点击URL后，我们来到了状态页面，页面分成三个区块。</p>
<p>Active Incidents 显示目前的异常事件，Past Incidents 显示过去的异常事件，Live Status 可以切换五种response time 图形。</p>
<figure data-type="image" tabindex="2"><img src="https://blog.gd1214b.icu/post-images/1624170045428.png" alt="" loading="lazy"></figure>
<h1 id="进阶操作">进阶操作</h1>
<h2 id="自定义运行时间">自定义运行时间</h2>
<p>Upptime有七个Workflows，只要把下面这段粘贴贴到.upptimerc.yml，就可以自定义Workflow的时间点</p>
<pre><code class="language-yaml">workflowSchedule: 
  graphs: &quot;0 0 * * *&quot; 
  responseTime: &quot;0 23 * * *&quot; 
  staticSite: &quot;0 1 * * *&quot; 
  summary: &quot;0 0 * * *&quot; 
  updateTemplate: &quot;0 0 * * *&quot; 
  updates: &quot; 0 3 * * *&quot; 
  uptime: &quot;*/5 * * * *&quot;
</code></pre>
<h2 id="自定义状态页面">自定义状态页面</h2>
<p>Status Website预设是英文的，如果你想要改成其他语言，可以把要修改的部分张贴到.upptimerc.yml</p>
<p>例如：</p>
<pre><code class="language-yaml">i18n:
  activeIncidents: 活动事件
  allSystemsOperational: 所有系统都可以运行
  incidentReport: &quot;事件 #$NUMBER 报告 →&quot;
  activeIncidentSummary: 在 $DATE 打开，有 $POSTS 个帖子
  incidentTitle: 事件 $NUMBER 的详细信息
  incidentDetails: 事件详细信息
  incidentFixed: 已修复
  incidentOngoing: 正在进行
  incidentOpenedAt: 打开于
  incidentClosedAt: 关闭于
  incidentSubscribe: 订阅更新
  incidentViewOnGitHub: 在 GitHub 上查看
  incidentCommentSummary: 由 $AUTHOR 在 $DATE 发布
  incidentBack: ← 返回所有事件
  pastIncidents: 过去的事件
  pastIncidentsResolved: 在 $MINUTES 分钟内解决了 $POSTS 个帖子
  liveStatus: 实时状态
  overallUptime: &quot;总体正常运行时间： $UPTIME&quot;
  overallUptimeTitle: 总体正常运行时间
  averageResponseTime: &quot;平均响应时间: $TIMEms&quot;
  averageResponseTimeTitle: 平均响应时间
  sevelDayResponseTime: 7 天响应时间
  responseTimeMs: 响应时间（毫秒）
  up: 正常运行
  down: 停机
  degraded: 运行缓慢
  ms: 毫秒
  loading: 加载中
  navGitHub: GitHub
  footer: gd1214b保留所有权利。 Copyright © 2021 gd1214b. All Rights Reserved.
  rateLimitExceededTitle: 超出速率限制
  rateLimitExceededIntro: 您已超过一小时内可以执行的请求数，因此您必须等待才能再次访问此网站。或者，您可以添加 GitHub 个人访问令牌以继续使用本网站。
  rateLimitExceededWhatDoesErrorMean: 这个错误是什么意思？本网站使用 GitHub API 访问有关我们网站状态的实时数据。默认情况下，GitHub 允许每个 IP 地址每小时 60 个请求，您已经消耗了这些请求。
  rateLimitExceededErrorHowCanFix: 我该如何解决？
  rateLimitExceededErrorFix: 您可以再等一个小时，您的 IP 地址限制将恢复。或者，您可以添加您的 GitHub 个人访问令牌，这将为您提供每小时额外 5,000 个请求。
  rateLimitExceededGeneratePAT: 了解如何生成个人访问令牌
  rateLimitExceededHasSet: 您有一个个人访问令牌集。
  rateLimitExceededRemoveToken: 删除令牌
  rateLimitExceededGitHubPAT: GitHub 个人访问令牌
  rateLimitExceededCopyPastePAT: 复制并粘贴您的令牌
  rateLimitExceededSaveToken: 保存令牌
  errorTitle: 发生错误
  errorIntro: 尝试获取最新状态详细信息时出错。
  errorText: 您可以稍后再试。
  errorHome: 转到主页
  pastScheduledMaintenance: 过去的预定维护
  scheduledMaintenance: 定期维护
  scheduledMaintenanceSummaryStarted: 从 $DATE 开始，持续 $DURATION 分钟
  scheduledMaintenanceSummaryStarts: 从 $DATE 开始，持续 $DURATION 分钟
  startedAt: 开始在
  startsAt: 开始于
  duration: 持续时间
  durationMin: $DURATION 分钟
  incidentCompleted: 已完成
  incidentScheduled: 已预定
</code></pre>
<h1 id="参考资料">参考资料</h1>
<ul>
<li><a href="https://upptime.js.org/docs/get-started">Getting started | Upptime</a></li>
<li><a href="https://github.com/upptime/upptime">upptime - GitHub</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[大话中国骨干网]]></title>
        <id>https://blog.gd1214b.icu/post/yZTkyJpRj/</id>
        <link href="https://blog.gd1214b.icu/post/yZTkyJpRj/">
        </link>
        <updated>2021-06-13T03:31:27.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本文转自:<a href="https://m.ithome.com/html/523947.htm">https://m.ithome.com/html/523947.htm</a></p>
</blockquote>
<p>987 年 9 月 20 日，北京中国兵器工业计算机应用研究所的钱天白教授，发出了我国第一封电子邮件，内容是：</p>
<p>“Across the Great Wall we can reach every corner in the world. ”（“越过长城，我们能到达世界的每个角落。” ）</p>
<p>这封邮件当时具有极为深远的意义，它被视为中国与互联网的第一次 “亲密接触”。而钱天白教授，也被世人称为 “中国互联网之父”。</p>
<p><img src="https://blog.gd1214b.icu/post-images/1623555143911.jpg" alt="" loading="lazy"><br>
其实，当时钱天白所使用的网络，并不是我国自主建设的 Internet 骨干网，而是 1986 年计算机应用技术研究所与德国卡尔斯鲁厄大学合作建设的一个国际联网项目——中国学术网（Chinese Academic Network，简称 CANET）。</p>
<p>这封邮件的传输路径，也颇为曲折。邮件发出之后，首先通过意大利公用分组网 ITAPAC 设在北京侧的 PAD 机，跨过半个地球，进入意大利本土的 ITAPAC 主网。然后，再进入德国的 DATEX―P 分组网。最终，到达卡尔斯鲁厄大学。当时，这条线路的速率，仅仅只有 300bps。</p>
<p>不管怎么说，这封邮件还是拉开了中国互联网时代的序幕。此后，越来越多的国内高校和科研院所，开始加入到互联网的研究中，并尝试组建更大规模的计算机网络。</p>
<h1 id="技术探索">技术探索</h1>
<p>1988 年初，中国邮电部正式建成了国内第一个 X.25 分组交换网——CNPAC，覆盖了北京、上海、广州、沈阳、西安、武汉、成都、南京、深圳等城市。</p>
<p>同年，中科院高能物理研究所采用 X.25 协议，将该单位的 DECnet（DEC 公司推出的一种小型机网络）与西欧中心的 DECnet 进行连接，实现了计算机国际远程连网，还实现了与欧洲和北美地区的电子邮件通信。</p>
<p>12 月，清华大学校园网采用胡道元教授从加拿大 UBC 大学引进的电子邮件软件包（采用 X.400 协议），通过 X.25 网与加拿大 UBC 大学相连，开通了电子邮件应用。</p>
<p>1989 年 5 月，中国研究网（CRN）通过当时邮电部的 CNPAC，实现了与德国研究网（DFN）的互连。借助 DFN 的网关，CRN 可以与 Internet 沟通。</p>
<p>1991 年，中科院高能物理研究所采用 DECNET 协议，以 X. 25 方式连入美国斯坦福线性加速器中心（SLAC）的 LIVEMORE 实验室，开通了电子邮件应用。</p>
<p>一个又一个连接的建立，振奋了国人。然而，这些连接都只能算是 “Internet 间接连接”或者 “单功能（邮件）连接”，并不是真正的 “完整 Internet 直接连接”。后来，学术界和政府层面很快开始了建立完整直接连接的尝试。</p>
<p>1989 年 10 月，中关村地区教育与科研示范网络项目正式启动。该项目由世界银行提供贷款，国家计委（国家计划委员会）、国家教委（国家教育委员会）、中国科学院、国家自然科学基金会共同参与投资和支持。世界银行将其命名为 “National Computing and Networking Facility of China”，也就是 NCFC。</p>
<p>1992 年底，NCFC 完成了三个院校网（中科院院网 CASNET、清华大学校园网 TUNET、北京大学校园网 PUNET）的建设。一年后，NCFC 主干网工程完工，采用高速光缆和路由器实现了三个院校网相互联通。</p>
<p>接下来，NCFC 的目标，就是直接连入 Internet。</p>
<h1 id="阻力重重">阻力重重</h1>
<p>众所周知，Internet 源于美国，虽然叫做国际互联网，但实际上当时处于美国的控制之下。中国想要真正连入 Internet，必须得到美国方面的同意。</p>
<p>中美双方的学术界人士，对于中国连入 Internet 这件事是非常积极的。</p>
<p>1991 年 10 月，在中美高能物理年会上，美方发言人怀特 · 托基提出，中国应该尽快接入 Internet。</p>
<p>1992 年 6 月，在日本神户举行的 INET'92 年会上，中国科学院钱华林研究员约见美国国家科学基金会国际联网部负责人，第一次正式提出，希望能够连入 Internet。<br>
<img src="https://blog.gd1214b.icu/post-images/1623555198471.jpg" alt="" loading="lazy"><br>
钱华林</p>
<p>结果，中方提出的请求，遭到来自美国政界的反对。之所以反对，是因为他们认为，来自社会主义阵营的中国，会利用 Internet 偷取美国的信息和技术研究成果。</p>
<p>经过反复的谈判和沟通，美方勉强同意，可以先建立一根专线连接。美国对这根专线提出了苛刻的要求：1、只能连入能源科学网（ESNET）；2、不得散布病毒；3、不得用于军事和商业领域。</p>
<p>为了长远考虑，中方接受了这些条件。1993 年 3 月 2 日，中科院高能物理研究所接入美国斯坦福线性加速器中心（SLAC）的 64K 专线正式开通，成为中国 “部分连入 Internet”的第一根专线。</p>
<p>1993 年 6 月，NCFC 专家们在 INET'93 年会上，利用各种机会重申了中国 “全功能连入 Internet”的要求，获得大部分到会人员的支持，极大地推动了项目的进展。</p>
<p>1994 年 4 月初，中美科技合作联委会在美国华盛顿举行。会前，中科院副院长胡启恒代表中方向美国国家科学基金会（NSF）重申连入 Internet 的要求，得到美方的认可。至此，所有的阻碍都被消除。<br>
<img src="https://blog.gd1214b.icu/post-images/1623555221767.jpg" alt="" loading="lazy"><br>
胡启恒</p>
<p>1994 年 4 月 20 日，NCFC 接入 Internet 的 64K 国际卫星专线正式开通（通过美国 Sprint 公司），实现了与 Internet 的全功能连接。</p>
<p>从这一天起，中国正式迈入互联网世界的大门，被国际上承认为真正拥有全功能 Internet 的第 77 个国家。</p>
<p>一个月后，5 月 21 日，中科院计算机网络信息中心完成了中国国家顶级域名（CN）服务器的设置，改变了中国的 CN 顶级域名服务器一直放在国外的历史。（中国顶级域名 CN 由钱天白教授于 1990 年 11 月 28 日代表中国正式在 SRI-NIC 正式注册登记。）</p>
<p>NCFC 连入 Internet 之后，中科院对它进行了进一步的扩建。</p>
<p>1995 年 4 月，中科院启动京外单位联网工程（简称 “百所联网”工程），目标是在北京地区已经入网的 30 多个研究所的基础上把网络扩展到全国 24 个城市，实现国内各学术机构的计算机互联，并与 Internet 互联。</p>
<p>1996 年 2 月，中科院做出决定，将以 NCFC 为基础发展起来的这个互联网络，正式改名为 “中国科技网（CSTNet）”。</p>
<h1 id="四大-ip-骨干网">四大 IP 骨干网</h1>
<p>1994 年 9 月，就在中国迈入互联网世界后不久，邮电部电信总局与美国商务部签订协议，正式启动中国公用计算机互联网的建设。这个网，就是现在大名鼎鼎的中国第一骨干网——ChinaNet。</p>
<p>1995 年 1 月，根据协议约定，邮电部电信总局分别在北京、上海开通了接入美国 Internet 的 64K 专线（同样是通过美国 Sprint 公司）。北京和上海这两个节点之间，采用 2M 带宽相连。</p>
<p>1996 年 1 月，电信总局正式开始向全社会提供 Internet 接入服务（通过电话网、DDN 专线以及 X.25 网等方式）。这一举动，宣告了中国互联网民用化时代的开始。</p>
<p>由于窄带拨号接入的入网领示号为 163，因此 ChinaNet 也被称为 163 网络（和网易的 163 没有关系）。</p>
<p>除了中国科技网（CSTNet）和中国公用计算机互联网（ChinaNet）之外，国内当时还同步建设了中国教育和科研计算机网（CERNET）和中国金桥信息网（CHINAGBN）</p>
<h2 id="中国教育和科研计算机网cernet">中国教育和科研计算机网（CERNET）</h2>
<p>1994 年 7 月初，由清华大学等六所高校建设的 “中国教育和科研计算机网”试验网开通，并通过 NCFC 的国际出口与 Internet 互联。</p>
<p>1994 年 8 月，由国家计委投资，国家教委主持的中国教育和科研计算机网（CERNET）正式立项。</p>
<p>1995 年 12 月，“中国教育和科研计算机网（CERNET）示范工程”建设完成。这张网，就是我们现在常说的 “教育网”（大学生读者应该比较熟悉）。</p>
<h2 id="中国金桥信息网chinagbn">中国金桥信息网（CHINAGBN）</h2>
<p>1993 年 3 月 12 日，朱镕基副总理主持会议，提出和部署建设国家公用经济信息通信网（简称金桥工程）。</p>
<p>1993 年 8 月 27 日，李鹏总理批准使用 300 万美元总理预备费，支持启动金桥前期工程建设。</p>
<p>1994 年 6 月 8 日，金桥前期工程建设全面展开。1995 年 8 月，金桥工程初步建成，在 24 省市开通联网（卫星网），并与国际网络实现互联。</p>
<p>1996 年 9 月 6 日，中国金桥信息网（CHINAGBN）连入美国的 256K 专线正式开通。中国金桥信息网宣布开始提供 Internet 服务，主要提供专线集团用户的接入和个人用户的单点上网服务。</p>
<p>最终，国内形成了四大骨干网的格局。正是这些网络，支撑起了中国互联网的起步。<br>
<img src="https://blog.gd1214b.icu/post-images/1623555306931.jpg" alt="" loading="lazy"><br>
1997 年 12 月，四大骨干网实现互联互通。此后，中国的互联网，进入了崭新的时代！</p>
<h1 id="中国电信">中国电信</h1>
<p>上面我们提到，中国邮电部在 1995 年建立了 ChinaNet（中国公用计算机互联网），也就是大家俗称的 163 网。</p>
<p>这张网，当时是国内普通网民接入互联网的主要通道。</p>
<p>因为当时中国邮电还没有实行 “邮电分营”，所以这张网是邮电部电信总局负责建设和维护。</p>
<p>1997 年，邮电部实施 “邮电分营”，这张网的责任主体，变成了 “中国电信”（老电信）。</p>
<p>同年，中国电信各省公司开始独立建设省内 IP 骨干网（省网）。建成之后，整个 ChinaNet 分为骨干网、省网和城域网三级结构。其中，骨干网分为核心层、汇聚层两层。<br>
<img src="https://blog.gd1214b.icu/post-images/1623555369281.jpg" alt="" loading="lazy"><br>
某省组网范例</p>
<p>1998 年 7 月，ChinaNet 骨干网第二阶段建设开始。八个大区域的骨干带宽被扩展到 155M，且所有节点路由器被替换为千兆路由器。</p>
<p>到了 2000 年的下半年，中国电信借助 DWDM（波分复用）和千兆路由器技术，再次对 ChinaNet 进行大规模升级和扩容。网络节点间的路由中继，由 155M 提升到 2.5Gbps，提速 16 倍。</p>
<p>截至到 2000 年底，ChinaNet 在国内总带宽已达到 800Gbps。2001 年 3 月，ChinaNet 的国际出口总带宽突破 3Gbps。</p>
<p>从 2002 年开始，ChinaNet 逐步进入 10G 时代。ChinaNet 的数据传输能力，达到国际先进水平。</p>
<p>2003 年，ChinaNet 进行优化整合，推行扁平化，取消省网，网络结构调整为骨干网和城域网两级。</p>
<p>与此同时，中国电信启动了多厂商 MSTP（多业务传送平台）的互通测试，推动 TDM 向以太网的转型。</p>
<p>再后来的故事，大家应该都比较熟悉了，就是往 OTN 和单波大容量演进，朝着 40G、100G（2015 年）的方向发展。</p>
<p>目前的骨干网，正在逐步普及单波 400G。如果按 60 波算，单光纤的传输容量能达到 20T 以上。</p>
<p>除了容量之外，就是 OXC 全光交叉、IPv6、SRv6、SDN 等新技术的引入、改造和普及，此前小枣君都做过详细的介绍。</p>
<p>接下来，我们再深入了解一下 ChinaNet 的整体情况。</p>
<p>一般来说，运营商的骨干网架构和技术细节属于秘密信息，不对外公开。但是，如今在互联网上，这些信息基本上都能查到。我就基于能公开查到的信息，大致介绍一下（可能有所变动，仅供参考）。</p>
<p>从架构来说，ChinaNet 分为骨干网和城域网（前面有说，干掉了省网），骨干网又分核心层、汇聚层和接入层。</p>
<p>北京、上海、广州，是 ChinaNet 的超级核心。除了超级核心之外，ChinaNet 还有天津、西安、南京、杭州、武汉、成都等普通核心。所有核心之间，采用 Full-Mesh 连接。国际出入口，以及运营商之间的互联互通，基本上都在核心层。<br>
<img src="https://blog.gd1214b.icu/post-images/1623555392422.jpg" alt="" loading="lazy"><br>
找到一张老图，仅供参考</p>
<p>汇聚层一般都在各省省会或第二大城市，采用双方向互联，分别连到一个超级核心和一个普通核心，有的省份会三方向互联。</p>
<p>接入层，就是汇聚层到各个地市城域网。</p>
<p>除了 ChinaNet 之外，中国电信还有一张非常重要的骨干网——CN2。</p>
<p>2004 年左右，为了满足高品质业务的需求，中国电信启动了 CN2 网络的招标建设。</p>
<p>CN2，全称 Chinatelecom Next Carrier Network（中国电信下一代承载网络），简称 CNCN，又称 CN2，刚好符合它作为中国电信第二张承载网的身份。</p>
<p>中国电信将 CN2 定位为 “精品网络项目”，非常有前瞻性。后来的事实证明，CN2 在抢占政企高端市场方面，确实发挥了重要作用。</p>
<p>CN2 的基本建网特点，就是扁平化、大容量和轻载运行。建网初期的核心技术，是 IP/MPLS。</p>
<p>从架构上来看，CN2 和 ChinaNet 有很大区别。CN2 一共是 7 个核心节点，分别是北京、上海、广州、南京、武汉、西安、成都。<br>
<img src="https://blog.gd1214b.icu/post-images/1623555412096.jpg" alt="" loading="lazy"><br>
同样是一张老图，供参考</p>
<p>此外，CN2 还在香港、新加坡、东京、伦敦、法兰克福等国际大城市设立了 POP 节点，提供国际 Internet 接入和网间互联业务。</p>
<p>CN2 作为高端网络，面向客户的时候，也进行了进一步的产品等级划分，例如 CN2 GT、CN2 GIA。</p>
<p>CN2 GT：GT 是 Global Transit 的简称，是 CN2 中的中端产品，在 CN2 里的等级比较低，但是相比于传统 163 骨干网依然有不少的提升。</p>
<p>CN2 GIA：GIA 是 Global Internet Access 的简称，是目前 CN2 中的最高端的产品，在 CN2 中的等级最高，线路表现最好、最稳定，价格也是最高。</p>
<p>2015 年，中国电信为了加强数据中心之间的节点互联，满足云服务日益增长的需求，还启动建设了 “第三张”全国骨干网——CN2-DCI（Data Center Interconnection）。关于这张网，网上目前公开的信息极少。</p>
<p>以上就是中国电信 IP 骨干网的大致情况。</p>
<h1 id="中国联通">中国联通</h1>
<p>接下来，我们再看看中国联通的骨干网。</p>
<p>1994 年 7 月 19 日，中国联通经国务院批准，正式挂牌成立，主要经营 GSM 移动通信业务。</p>
<p>随着 2G 向 3G 的演进，有了 GPRS 数据业务，中国联通也建设了 UNINET 骨干网，作为自家 GPRS 网络的接入点，也是面向全国提供互联网服务的载体。</p>
<p>因为 UNINET 的拨号上网接入号码为 “165”，所以这个网也被称为 165 网。</p>
<p>1999 年 10 月 22 日，中国网通（小网通、老网通）由中科院、广电总局、铁道部、上海市政府四方出资成立，在全国 17 个城市开通互联网服务。</p>
<p>网通也建设了一张自己的骨干网，就是 “中国网通公用互联网”（CNCNET）。</p>
<p>此外，邮电部当年除了 163 网之外，在 1997 年还建设了一张中国公众多媒体通信网。这张网络很特别，完全独立于 163 网，采用私有地址 10.0.0.0/8，只能国内互相访问，相当于是一张 “国内局域网”。如果需要访问 163 网和 Internet 的话，需要找专门的代理服务器跳转。</p>
<p>因为这张网络的接入号码为 169，故又称 169 网。</p>
<p>169 网有一个很大的优势，就是价格便宜。当时 163 的使用费是每小时 10 元，而 169 只需要每小时 4 元。因此，169 受到很多普通网民的喜爱。</p>
<p>2002 年，国内电信行业重组，中国电信 “南北分家”。北方九省一市电信公司从原中国电信剥离，与小网通、吉通合并，成立新的中国网通（大网通、新网通）。</p>
<p>于是，中国网通在既有 CNCNET 的基础上，得到了中国电信从 163 网拆出来的部分精华骨干网。为了区别于中国电信的 163 网，网通带走的这个网被称为 “CHINA169”。</p>
<p>值得一提的是，当时吉通并入中国网通，CHINAGBN（中国金桥网）也随之并入 CHINA169 中。</p>
<p>2008 年，中国电信业再次重组，中国联通和中国网通合并，变成新的中国联通。</p>
<p>新的中国联通，自然而然地接管了 CHINA169。</p>
<p>此外，网通最初的骨干网 CNCNET（主要承载原网通 NGN 软交换、DCN 等业务）也交给联通运营。这个 CNCNET（自治域为 AS9929，经常被称为 9929 网络）保持相对独立，后来被称为 “联通 A 网”。</p>
<p>与之相对应的 “联通 B 网”，就是原联通建设的 IP 承载网，主要承载 2G/3G 移动网业务的那个网。后来好像逐渐没用了，业务迁到了 A 网。</p>
<p>2018 年，联通将 IP 承载 A 网改名为 CUII，中国联通工业（产业）互联网。CUII 的定位有点像中国电信的 CN2，主要提供国际和国内跨地市 MPLS-VPN 和大客户互联网专线任务的承载，常用于企业宽带和 IDC，极少用于家用宽带。</p>
<p>总之，联通主要就是 “China169+CUII”的双网格局。<br>
<img src="https://blog.gd1214b.icu/post-images/1623555456726.jpg" alt="" loading="lazy"><br>
由于历史原因，联通 China169 的网络流量存在较大的南北差异，北方 10 省的业务流量明显大于南方。</p>
<p>早期的时候，China169 全网分为四个大区，分别是北方大区、华东大区、南方大区、西部大区。设置了北京 1、北京 2、上海、广州四个核心节点，并将陕西、四川、山东、辽宁设为区域核心节点。<br>
<img src="https://blog.gd1214b.icu/post-images/1623555476419.jpg" alt="" loading="lazy"></p>
<h1 id="中国移动">中国移动</h1>
<p>再来说说中国移动。</p>
<p>中国移动的骨干网发展史没有电信和联通那么复杂，这家公司本身的历史就很简单。</p>
<p>2000 年 4 月 20 日，中国移动正式成立，5 月 16 日挂牌。</p>
<p>中移成立初期，也是主要以移动语音业务为主。后来，随着业务的发展，才逐步建设了较为完整的 IP 骨干网，名为 CMNET（China Mobile Network，中国移动互联网），自治域为 AS9808，也称 9808 网络。</p>
<p>当时，CMNET 是中国移动 GPRS 网络的两大接入点（另一个是 CMWAP）之一。通过 CMNET 接入点，中国移动手机用户可以接入 CMNET 网络，访问 Internet。</p>
<p>虽然 CMNET 起步比较晚（相对来说），但发展速度非常快。尤其是这些年中国移动拼命拓展固网宽带业务，流量增长迅猛，扩容招标也是非常频繁。</p>
<p>CMNET 为骨干网和省网两级自治域、多层结构。骨干网分为核心层、汇聚层和接入层。<br>
<img src="https://blog.gd1214b.icu/post-images/1623555503680.jpg" alt="" loading="lazy"><br>
北京、上海、广州 3 个节点为核心节点，它们与相连链路共同构成骨干核心层。骨干核心层提供大区内省份流量的交换，并负责全网与国际 Internet、国内其他运营商的互联。</p>
<p>汇聚层负责汇接各省到骨干网的连接。南京、武汉、成都、西安、沈阳等节点为汇聚节点，负责本大区内省份流量之间的交换。</p>
<p>接入层负责汇聚本省省际流量和出网流量。接入节点一般双上联核心节点，部分流量较大的省份，会采用多上联。</p>
<p>国内和国际网间互联方面，节点都设置在北京、上海、广州。</p>
<p>除了 CMNET 之外，中国移动还有 IP 专用承载网，简称 IP 专网。当时建设这个网的主要目的，是为了承载高价值客户业务，如话音，流媒体，信令，网管，大型客户的 VPN 等业务。</p>
<p>IP 专网为三层结构，分别为核心、汇聚和接入三层，采用单一自治域，目前已经延伸到国内 330 多个主要地市。大致架构如下：</p>
<figure data-type="image" tabindex="1"><img src="https://blog.gd1214b.icu/post-images/1623555523849.jpg" alt="" loading="lazy"></figure>
<h1 id="中国广电">中国广电</h1>
<p>最后再说说新入坑的中国广电吧。</p>
<p>2018 年，中国广电的广电宽带获批骨干网运营资质，启动全国骨干网建设，并将其命名为 CBNNET。</p>
<p>CBNNET 的主要建设单位，是中国广电的子公司中国有线。</p>
<p>2019 年，广电骨干网已经与中国电信的骨干网进行了互联互通。</p>
<p>按照规划，CBNNET 将是一张 “五纵五横”的全国性 IP 骨干网，全网 100G OTN 起步，部分关键链路 400G/1T OTN。<br>
<img src="https://blog.gd1214b.icu/post-images/1623555561296.jpg" alt="" loading="lazy"><br>
未来，CBNNET 将采用三层架构，即国干层、省网 / 接入层、互联层，覆盖 337 个地市，逐步形成双平面网络，直接提供宽带出口，互联网总出口带宽将达到 5T。<br>
<img src="https://blog.gd1214b.icu/post-images/1623555575630.jpg" alt="" loading="lazy"></p>
<h1 id="结语">结语</h1>
<p>好啦，以上就是目前国内运营商骨干网的大致情况。简单画个表，如下：<br>
<img src="https://blog.gd1214b.icu/post-images/1623555598219.jpg" alt="" loading="lazy"><br>
值得一提的是，包括中移在内的运营商，针对现有骨干网容量不足的情况，普遍建设了所谓的 “第二平面”。“第二平面”属于扩容，并不是新建独立的第二张网络。</p>
<p>除了上述骨干网之外，我们国家还有几张针对特定用户的骨干网，分别如下：<br>
<img src="https://blog.gd1214b.icu/post-images/1623555614338.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决Gridea同步失败的问题]]></title>
        <id>https://blog.gd1214b.icu/post/F2_C5EVQh/</id>
        <link href="https://blog.gd1214b.icu/post/F2_C5EVQh/">
        </link>
        <updated>2021-06-11T06:09:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>由于众所周知的原因，GitHub在中国大陆地区收到的干扰严重，大部分情况下根本无法连接，这也导致Gridea的同步失败问题。<br>
<img src="https://blog.gd1214b.icu/post-images/1623391923562.png" alt="" loading="lazy"></p>
<h1 id="解决方案">解决方案</h1>
<p>通常的解决方案是通过代理服务器连接，但由于大部分的代理软件（如v2rayN等），只能更改系统的代理设置，，像Gridea这些不遵守系统代理设置的软件，无法通过代理服务器连接。</p>
<p>下面介绍一种本人亲测有效的方法。</p>
<h2 id="第一步-连接上代理">第一步 连接上代理</h2>
<p>这一步不做过多讲解。</p>
<h2 id="第二步-下载并安装github-desktop">第二步 下载并安装GitHub Desktop</h2>
<p>下载地址：<br>
<a href="https://central.GitHub.com/deployments/desktop/desktop/latest/win32">https://central.GitHub.com/deployments/desktop/desktop/latest/win32</a><br>
打开安装程序即可自动完成安装。</p>
<h2 id="第三步-登陆github账号">第三步 登陆GitHub账号</h2>
<h3 id="1点击-sign-into-githubcom">1.点击 Sign into GitHub.com</h3>
<figure data-type="image" tabindex="1"><img src="https://blog.gd1214b.icu/post-images/1623481745688.jpg" alt="" loading="lazy"></figure>
<h3 id="2在浏览器里登陆你的github账号">2.在浏览器里登陆你的GitHub账号</h3>
<figure data-type="image" tabindex="2"><img src="https://blog.gd1214b.icu/post-images/1623481982934.jpg" alt="" loading="lazy"></figure>
<h2 id="第四步-清空gridea-配置目录下ouput文件夹里的所有内容">第四步 清空Gridea 配置目录下ouput文件夹里的所有内容</h2>
<blockquote>
<p>需要清空ouput文件夹里的所有内容的原因是GitHub Desktop无法克隆仓库到非空文件夹中，这一步不会影响你的博客数据。</p>
</blockquote>
<p><strong>注意output文件夹不要删除</strong><br>
<img src="https://blog.gd1214b.icu/post-images/1623482115749.jpg" alt="" loading="lazy"></p>
<h2 id="第五步-在github-desktop中克隆你的博客仓库">第五步 在GitHub Desktop中克隆你的博客仓库</h2>
<p><img src="https://blog.gd1214b.icu/post-images/1623482247255.jpg" alt="" loading="lazy"><br>
注意目录要选择Gridea 配置目录下ouput文件夹<br>
<img src="https://blog.gd1214b.icu/post-images/1623482322654.jpg" alt="" loading="lazy"></p>
<h2 id="第六步-同步gridea">第六步 同步Gridea</h2>
<p>在Gridea中依次点击 远程 &gt; 检测远程连接 &gt; 同步<br>
这一步无所谓是否同步成功.<br>
<img src="https://blog.gd1214b.icu/post-images/1623482746893.jpg" alt="" loading="lazy"></p>
<h2 id="第七步-同步到github上">第七步 同步到GitHub上</h2>
<p>在GitHub Desktop 中点击 Pushu origin<br>
<img src="https://blog.gd1214b.icu/post-images/1623482930640.jpg" alt="" loading="lazy"><br>
等候完成即可。</p>
<h1 id="其他说明">其他说明</h1>
<p>此时你的博客应该已经同步到GitHub上了，如果有任何问题，欢迎在下方的评论区中提出。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Cloudflare自选IP加速Heroku-v2ray]]></title>
        <id>https://blog.gd1214b.icu/post/P9MODAcdP/</id>
        <link href="https://blog.gd1214b.icu/post/P9MODAcdP/">
        </link>
        <updated>2021-06-09T11:27:43.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><strong>请先阅读本站的免责声明:<a href="https://blog.gd1214b.icu/post/disclaimers/">https://blog.gd1214b.icu/post/disclaimers/</a></strong><br>
<strong>请遵循当地法律使用，如您有违反当地法律造成的责任，本站拒不承担.</strong></p>
</blockquote>
<h1 id="前言">前言</h1>
<p>在<a href="https://blog.gd1214b.icu/post/NbdQntVCG/">上一篇文章</a>中,我们介绍了在Heroku上部署v2ray的方法。但在中国大陆直连Heroku服务器的速度不是很快，因此我们使用Cloudflare的自选IP来加速连接。</p>
<h1 id="配置cloudflare反向代理">配置CloudFlare反向代理</h1>
<h2 id="1">1.</h2>
<p>首先登陆<a href="https://dash.cloudflare.com/">CloudFlare官网</a>，然后点击 右侧的 Workers.<br>
<img src="https://blog.gd1214b.icu/post-images/1623238734720.webp" alt="" loading="lazy"></p>
<h2 id="2">2.</h2>
<p>接着点击创建Workers<br>
<img src="https://blog.gd1214b.icu/post-images/1623238793121.webp" alt="" loading="lazy"></p>
<h2 id="3">3.</h2>
<p>接着复制下方代码，并添加进去.注意把下面的中文替换成你的Heroku应用名称</p>
<pre><code class="language-javascript">addEventListener(
  &quot;fetch&quot;,event =&gt; {
     let url=new URL(event.request.url);
     url.hostname=&quot;你的heroku应用名称.herokuapp.com&quot;;
     let request=new Request(url,event.request);
     event. respondWith(
       fetch(request)
     )
  }
)
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://blog.gd1214b.icu/post-images/1623239005214.png" alt="" loading="lazy"></figure>
<h1 id="使用cloudflare自选ip">使用Cloudflare自选IP</h1>
<p>下载<a href="https://cdn.jsdelivr.net/gh/gd1214b/files@main/CloudflareST_windows_amd64.zip">这个</a>文件,解压之后打开这个程序:<br>
<img src="https://blog.gd1214b.icu/post-images/1623239272158.png" alt="" loading="lazy"><br>
这个程序会对Cloudflare的所有IP进行测速，这可能会需要几分钟的时间。</p>
<p>测速结果会保存在应用程序目录下的result.csv文件中<br>
<img src="https://blog.gd1214b.icu/post-images/1623239511772.png" alt="" loading="lazy"><br>
在里面找到延迟最低的IP地址（一般在第一行），把它复制下来，等会会用到。</p>
<h1 id="配置v2ray">配置V2Ray</h1>
<p>打开你的v2ray客户端，添加vmess服务器，按照下面的图填写<br>
<img src="https://blog.gd1214b.icu/post-images/1623239829821.png" alt="" loading="lazy"><br>
除了中文部分以外严格按照图上内容填写。</p>
<p>然后保存，就可以愉快地使用v2ray了</p>
<hr>
<p>如果你遇到了任何问题 欢迎在下方的评论区中提出。</p>
<h1 id="其他说明">其他说明</h1>
<ul>
<li>Heroku 为我们提供了免费的容器服务，我们不应该滥用它，所以本项目不宜长期使用.</li>
<li>Heroku 的网络并不稳定，部署前请三思。</li>
<li>Heroku每个月有550小时的时长限制，只适合轻度使用用户.</li>
<li>Heroku的实例半小时没有访问就会自动休眠,你可以使用Uptimebot定时访问来解决这个问题。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[搞瘫全球大半个互联网，Fastly是何方神圣？]]></title>
        <id>https://blog.gd1214b.icu/post/YdM16VZBI/</id>
        <link href="https://blog.gd1214b.icu/post/YdM16VZBI/">
        </link>
        <updated>2021-06-09T06:59:40.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本文转自:<a href="https://new.qq.com/omn/20210609/20210609A01G7M00.html">https://new.qq.com/omn/20210609/20210609A01G7M00.html</a></p>
</blockquote>
<p><img src="https://blog.gd1214b.icu/post-images/1623222085018.webp" alt="" loading="lazy"><br>
人们习以为常的互联网服务，已经成为现代生活必备的基础设施，但在背后网络云服务商集中度不断提升的情况下，其脆弱性也愈发突出。8日全球互联网世界碰到的一次不大不小的“断网”事件，就是这一脆弱性的最新例证。</p>
<p>全世界数以亿计互联网用户在当天发现自己无法打开日常访问的网站，在经过约1小时后才逐渐恢复。最终，一家名为Fastly的CDN（content delivery network）服务提供商浮出水面，这家公司表示，由于进行了一项“服务配置”的修改，引发了大规模故障。</p>
<p>有意思的是，当人们得知问题出自Fastly这家公司后，其股价在当天出现大涨，因为通过这起事件，投资者意识到，这家总部位于旧金山，员工数不到1000人的“边缘计算云服务”公司，对互联网世界有着举足轻重的影响力。</p>
<p>宣称在互联网终端用户和服务器之间架设“中继站”，为用户提供更快捷、便利的互联网内容体验的同时，由于这一类服务商集中度过高，导致了类似当天大范围用户无法打开网页这样的风险隐患。</p>
<h1 id="服务配置修改搞瘫大半个互联网">“服务配置”修改搞瘫大半个互联网</h1>
<p>本周二，当全球各地数以亿计的互联网用户登陆自己平日经常登陆的网站时，发现页面无法打开，并出现了“503 Errors”的错误提示，包括亚马逊、Reddit、Twitch、Pinterest以及包括纽约时报、CNN等在内的多数新闻网站均悉数中招。</p>
<p>这一问题大约持续了一个小时，初步的调查结果显示，互联网内容传递服务公司Fastly是引起这一场互联网大规模掉线的主要原因。</p>
<p>从Fastly发布的状态更新报告可以追踪事件的整个进展过程，大约在美国太平洋时间8日凌晨2:58分，Fastly称，“我们目前正在调查对我们的内容传递网络服务（Content Delivery Network）带来潜在影响的冲击。”</p>
<p>在这则报告发布后不久，推特上便出现了许多用户声称无法打开BBC、CNN、纽约时报等新闻网站的推文。社交平台推特本身也受到了一定程度的影响，其负责表情包的服务器无法接入，导致在出问题的时段内，许多推文的表情无法正常显示。</p>
<p>随后问题变得愈发严重，全球各个地区均不同程度出现网站无法打开的问题，甚至连英国政府官方网站都一度受到影响。</p>
<p>在大约一个小时后，Fastly再度更新状态报告，称已经找到问题并实施了修复措施，在美国太平洋时间8日凌晨4点10分，Fastly通过其官方推特称，“我们发现一个服务配置的更改引发了全球服务的短暂中断，目前已将这一配置关闭，我们全球服务网络已恢复正常。”</p>
<h1 id="fastly是何方神圣">Fastly是何方神圣？</h1>
<p>对于许多普通互联网用户来说，Fastly的名字或许十分陌生，这家公司创办于2011年，总部位于旧金山，从事的主要业务是互联网云服务。2017年，该公司发布了边缘云计算平台，提供将终端服务器的内容更近、更快地给到终端用户的服务。简而言之，Fastly为服务器和终端用户之间搭建了一个中继站，让用户无需再从终端服务器上下载网络内容，而由Fastly事先预载一部分内容，当用户访问相应网站时，就无需再从远端的终端服务器上下载，而从Fastly处获得，提高终端用户获得互联网内容的效率。</p>
<p>Fastly的这一互联网内容传递服务，能够让网页的加载速度更快、优化图片、视频和其他大尺寸的内容能够更快的在用户终端上出现。在Fastly官方网站的介绍中，该公司列举了几个例子，例如新闻网站Buzzfeed在使用了Fastly的服务后，加载速度提高了50%，纽约时报在美国大选夜能够承载200万用户登陆等。</p>
<p>此外，边缘云计算的另一个好处是作为一道额外的防范黑客攻击的防火墙，例如最常见的DDoS攻击等，保障终端服务器不受攻击的影响。</p>
<p>但同时带来的一个问题是，由于Fastly作为连接终端服务器和终端用户的桥梁，一旦这座“桥梁”发生问题，双方之间的连接也就断了，这正是8日所短暂发生的情况。</p>
<p>目前对于这起故障到底如何发生的有关细节还不得而知，Fastly方面也仅给出了是因为进行一项“服务配置”的调试而引发的简单解释。</p>
<p>一个有意思的现象是，在外界已经得知此次不得不小的“断网”事件主要责任方是Fastly的情况下，Fastly的股价在8日盘中大涨超过10%，这背后的逻辑是：通过这次事件，许多投资者发现Fastly居然服务如此多的互联网内容提供方，对互联网有着超过之前预期的影响力，尽管是一桩负面事件，但却对公司本身是一次利好。</p>
<p>根据Fastly 2021年第一季度财报显示，截至3月31日，服务全球58个市场，第一季度总收入8485万美元，其中6273万美元来自于美国市场，占绝大部分比例，来自亚太和欧洲市场的收入则分别为915万和964万美元。Fastly在美国以外的用户在截至3月31日为1208，约占全部用户量的53%。</p>
<p>从财报业绩表现来看，Fastly仍处在业务快速扩张阶段，第一季度收入同比增长34.8%，同时研发投入同比增长超过100%，导致当季净亏损5051万美元。去年全年，Fastly收入同比增速为45%，净亏损9593万美元。</p>
<p>Fastly在2020年同样是一支疫情受益股，股价在当年从年初的每股约20美元一路涨至年末的每股100美元以上翻了4倍多。但在进入2021年后，股价又一路从高位回落，目前距离历史高位已经腰斩。</p>
<p>Fastly断网事件再次提醒我们互联网服务的脆弱性，当提供互联网底层服务的单个公司出现短时故障时，将导致大规模用户的互联网服务受到影响，因为越来越多的互联网内容提供方正在依赖越来越少的类似Fastly这样的中间云服务提供商，这样的事件在近期时有发生，包括去年7月Cloudflare因故障中断服务以及亚马逊旗下AWS在去年11月碰到的短期故障等，云服务市场集中度的不断提高，正在不断加剧这样的潜在风险。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在Heroku上部署v2ray]]></title>
        <id>https://blog.gd1214b.icu/post/NbdQntVCG/</id>
        <link href="https://blog.gd1214b.icu/post/NbdQntVCG/">
        </link>
        <updated>2021-06-08T07:47:14.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><strong>请先阅读本站的免责声明:<a href="https://blog.gd1214b.icu/post/disclaimers/">https://blog.gd1214b.icu/post/disclaimers/</a></strong><br>
<strong>请遵循当地法律使用，如您有违反当地法律造成的责任，本站拒不承担.</strong></p>
</blockquote>
<h1 id="简介">简介</h1>
<h2 id="heroku">Heroku</h2>
<p>Heroku是 Salesforce 旗下云服务商，提供方便便捷的各种云服务，如服务器，数据库，监控，计算等等。并且他提供了免费版本，这使得我们这些平时想搞一些小东西的人提供了莫大的便捷，虽然他有时长和宕机的限制，但是对于个人小程序来说已经足够了。</p>
<h2 id="v2ray">V2Ray</h2>
<p>V2Ray（Project V）是一个优秀的开源网络代理工具，目前已经全平台支持Windows、Mac、Android、IOS、Linux等操作系统的使用。相对起Shadowsocks来说属于后起之秀，在混淆能力、兼容性、速度上有着独到的优点，V2Ray是一个不错的选择。</p>
<h1 id="服务端部署">服务端部署</h1>
<h2 id="注册heroku">注册Heroku</h2>
<p>很简单，根据官网的提示操作就行:<a href="https://signup.heroku.com/">https://signup.heroku.com/</a></p>
<h2 id="部署">部署</h2>
<p>点击下面的链接将v2ray部署到Heroku上：<br>
<a href="https://heroku.com/deploy?template=https://github.com/libsgh/v2ray-heroku.git">https://heroku.com/deploy?template=https://github.com/libsgh/v2ray-heroku.git</a></p>
<h2 id="app-name">App name</h2>
<p><img src="https://blog.gd1214b.icu/post-images/1623138897097.png" alt="" loading="lazy"><br>
应用名称，可随意填写。</p>
<h2 id="choose-a-region">Choose a region</h2>
<p><img src="https://blog.gd1214b.icu/post-images/1623139055193.png" alt="" loading="lazy"><br>
服务器所在位置，有美国和欧洲两个选择。</p>
<h2 id="protocol">PROTOCOL</h2>
<p><img src="https://blog.gd1214b.icu/post-images/1623139144487.png" alt="" loading="lazy"><br>
v2ray所使用的协议，可以不用改动。</p>
<h2 id="uuid">UUID</h2>
<p>用户的连接ID，必须填写，可在这里随机生成一个：<a href="https://1024tools.com/uuid">https://1024tools.com/uuid</a><br>
(只需复制一个即可，千万要注意保存)。<br>
<img src="https://blog.gd1214b.icu/post-images/1623139189773.png" alt="" loading="lazy"></p>
<h2 id="ws_path">WS_PATH</h2>
<p><img src="https://blog.gd1214b.icu/post-images/1623139413528.png" alt="" loading="lazy"><br>
websocket路径,可以不用改动。</p>
<h2 id="进行部署">进行部署</h2>
<p>点击最后的“Deploy app”即可。<br>
<img src="https://blog.gd1214b.icu/post-images/1623139548540.png" alt="" loading="lazy"><br>
这里可能会需要一点时间，看到下面的界面就说明部署成功了：<br>
<img src="https://blog.gd1214b.icu/post-images/1623139649895.png" alt="" loading="lazy"><br>
打开网页：https://app-name.herokuapp.com/ray (<strong>将app name替换为你在第一部中填写的名称</strong>)如果显示Bad Request 则说明v2ray服务端部署就绪。</p>
<h1 id="客户端配置">客户端配置</h1>
<p>这里以windows端的v2rayN为例，其他客户端配置方法类似。<br>
<img src="https://blog.gd1214b.icu/post-images/1623140960527.png" alt="" loading="lazy"><br>
请严格按照以上信息填写，否则可能无法连接。</p>
<p>到这一步你的v2ray应该已经部署好了，如果还是无法连接的话可以在下方的评论区中提出问题。</p>
<h1 id="其他说明">其他说明</h1>
<h2 id="伪装首页3d元素周期表">伪装首页（3D元素周期表）</h2>
<p>请求/，返回3D元素周期表<br>
<img src="https://blog.gd1214b.icu/post-images/1623156776166.png" alt="" loading="lazy"></p>
<h2 id="html5测速">HTML5测速</h2>
<p>请求/speedtest/，返回html5-speedtest测速页面<br>
<img src="https://blog.gd1214b.icu/post-images/1623156810883.png" alt="" loading="lazy"></p>
<h2 id="文件下载速度测试">文件下载速度测试</h2>
<p>请求/test/，返回文件列表,可用于文件下载速度测试<br>
<img src="https://blog.gd1214b.icu/post-images/1623156875631.png" alt="" loading="lazy"></p>
<h1 id="致谢">致谢</h1>
<ul>
<li><a href="https://github.com/libsgh/v2ray-heroku">v2ray-heroku</a>是github上的一个开源项目，本文部署时用到了其中的源代码。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Cloudflare Worker搭建反向代理]]></title>
        <id>https://blog.gd1214b.icu/post/h7Wc7SF8X/</id>
        <link href="https://blog.gd1214b.icu/post/h7Wc7SF8X/">
        </link>
        <updated>2021-06-08T02:32:10.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><strong>请先阅读本站的免责声明:<a href="https://blog.gd1214b.icu/post/disclaimers/">https://blog.gd1214b.icu/post/disclaimers/</a></strong><br>
<strong>请遵循当地法律使用，如您有违反当地法律造成的责任，本站拒不承担.</strong></p>
</blockquote>
<h1 id="前言">前言</h1>
<p>Cloudflare 推出了 Workers 服务，在国内一般叫它边缘计算。<a href="https://github.com/EtherDream/jsproxy">jsproxy</a> 是个 Github 开源项目，可以通过 Cloudflare Workers 服务搭建一个反向代理服务器，这个反向代理服务器不需要安装在我们自己的 VPS 主机上，而是直接部署在 Cloudflare 节点上，这可以极大的降低我们自身 VPS 主机的性能损耗。</p>
<h1 id="教程">教程</h1>
<h2 id="1">1</h2>
<p>打开<a href="https://dash.cloudflare.com/">Cloudflare</a>，登录CLoudflare账户。（Cloudflare支持中文界面，操作前可先将界面语言调换只中文）；<br>
<img src="https://blog.gd1214b.icu/post-images/1623119946925.png" alt="" loading="lazy"></p>
<h2 id="2">2</h2>
<p>创建Worker实例（创建前还要配置一下，这里就不多说了，可以根据自己的需求进行选择，免费的一天可以处理十万请求，正常来说很够用）；<br>
<img src="https://blog.gd1214b.icu/post-images/1623119975841.png" alt="" loading="lazy"></p>
<h2 id="3">3</h2>
<p>将以下代码复制到左侧脚本框中；</p>
<pre><code class="language-javascript">'use strict'

/**
 * static files (404.html, sw.js, conf.js)
 */
const ASSET_URL = 'https://etherdream.github.io/jsproxy'

const JS_VER = 10
const MAX_RETRY = 1

/** @type {RequestInit} */
const PREFLIGHT_INIT = {
  status: 204,
  headers: new Headers({
    'access-control-allow-origin': '*',
    'access-control-allow-methods': 'GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS',
    'access-control-max-age': '1728000',
  }),
}

/**
 * @param {any} body
 * @param {number} status
 * @param {Object&lt;string, string&gt;} headers
 */
function makeRes(body, status = 200, headers = {}) {
  headers['--ver'] = JS_VER
  headers['access-control-allow-origin'] = '*'
  return new Response(body, {status, headers})
}


/**
 * @param {string} urlStr 
 */
function newUrl(urlStr) {
  try {
    return new URL(urlStr)
  } catch (err) {
    return null
  }
}


addEventListener('fetch', e =&gt; {
  const ret = fetchHandler(e)
    .catch(err =&gt; makeRes('cfworker error:\n' + err.stack, 502))
  e.respondWith(ret)
})


/**
 * @param {FetchEvent} e 
 */
async function fetchHandler(e) {
  const req = e.request
  const urlStr = req.url
  const urlObj = new URL(urlStr)
  const path = urlObj.href.substr(urlObj.origin.length)

  if (urlObj.protocol === 'http:') {
    urlObj.protocol = 'https:'
    return makeRes('', 301, {
      'strict-transport-security': 'max-age=99999999; includeSubDomains; preload',
      'location': urlObj.href,
    })
  }

  if (path.startsWith('/http/')) {
    return httpHandler(req, path.substr(6))
  }

  switch (path) {
  case '/http':
    return makeRes('请更新 cfworker 到最新版本!')
  case '/ws':
    return makeRes('not support', 400)
  case '/works':
    return makeRes('it works')
  default:
    // static files
    return fetch(ASSET_URL + path)
  }
}


/**
 * @param {Request} req
 * @param {string} pathname
 */
function httpHandler(req, pathname) {
  const reqHdrRaw = req.headers
  if (reqHdrRaw.has('x-jsproxy')) {
    return Response.error()
  }

  // preflight
  if (req.method === 'OPTIONS' &amp;&amp;
      reqHdrRaw.has('access-control-request-headers')
  ) {
    return new Response(null, PREFLIGHT_INIT)
  }

  let acehOld = false
  let rawSvr = ''
  let rawLen = ''
  let rawEtag = ''

  const reqHdrNew = new Headers(reqHdrRaw)
  reqHdrNew.set('x-jsproxy', '1')

  // 此处逻辑和 http-dec-req-hdr.lua 大致相同
  // https://github.com/EtherDream/jsproxy/blob/master/lua/http-dec-req-hdr.lua
  const refer = reqHdrNew.get('referer')
  const query = refer.substr(refer.indexOf('?') + 1)
  if (!query) {
    return makeRes('missing params', 403)
  }
  const param = new URLSearchParams(query)

  for (const [k, v] of Object.entries(param)) {
    if (k.substr(0, 2) === '--') {
      // 系统信息
      switch (k.substr(2)) {
      case 'aceh':
        acehOld = true
        break
      case 'raw-info':
        [rawSvr, rawLen, rawEtag] = v.split('|')
        break
      }
    } else {
      // 还原 HTTP 请求头
      if (v) {
        reqHdrNew.set(k, v)
      } else {
        reqHdrNew.delete(k)
      }
    }
  }
  if (!param.has('referer')) {
    reqHdrNew.delete('referer')
  }

  // cfworker 会把路径中的 `//` 合并成 `/`
  const urlStr = pathname.replace(/^(https?):\/+/, '$1://')
  const urlObj = newUrl(urlStr)
  if (!urlObj) {
    return makeRes('invalid proxy url: ' + urlStr, 403)
  }

  /** @type {RequestInit} */
  const reqInit = {
    method: req.method,
    headers: reqHdrNew,
    redirect: 'manual',
  }
  if (req.method === 'POST') {
    reqInit.body = req.body
  }
  return proxy(urlObj, reqInit, acehOld, rawLen, 0)
}


/**
 * 
 * @param {URL} urlObj 
 * @param {RequestInit} reqInit 
 * @param {number} retryTimes 
 */
async function proxy(urlObj, reqInit, acehOld, rawLen, retryTimes) {
  const res = await fetch(urlObj.href, reqInit)
  const resHdrOld = res.headers
  const resHdrNew = new Headers(resHdrOld)

  let expose = '*'
  
  for (const [k, v] of resHdrOld.entries()) {
    if (k === 'access-control-allow-origin' ||
        k === 'access-control-expose-headers' ||
        k === 'location' ||
        k === 'set-cookie'
    ) {
      const x = '--' + k
      resHdrNew.set(x, v)
      if (acehOld) {
        expose = expose + ',' + x
      }
      resHdrNew.delete(k)
    }
    else if (acehOld &amp;&amp;
      k !== 'cache-control' &amp;&amp;
      k !== 'content-language' &amp;&amp;
      k !== 'content-type' &amp;&amp;
      k !== 'expires' &amp;&amp;
      k !== 'last-modified' &amp;&amp;
      k !== 'pragma'
    ) {
      expose = expose + ',' + k
    }
  }

  if (acehOld) {
    expose = expose + ',--s'
    resHdrNew.set('--t', '1')
  }

  // verify
  if (rawLen) {
    const newLen = resHdrOld.get('content-length') || ''
    const badLen = (rawLen !== newLen)

    if (badLen) {
      if (retryTimes &lt; MAX_RETRY) {
        urlObj = await parseYtVideoRedir(urlObj, newLen, res)
        if (urlObj) {
          return proxy(urlObj, reqInit, acehOld, rawLen, retryTimes + 1)
        }
      }
      return makeRes(res.body, 400, {
        '--error': `bad len: ${newLen}, except: ${rawLen}`,
        'access-control-expose-headers': '--error',
      })
    }

    if (retryTimes &gt; 1) {
      resHdrNew.set('--retry', retryTimes)
    }
  }

  let status = res.status

  resHdrNew.set('access-control-expose-headers', expose)
  resHdrNew.set('access-control-allow-origin', '*')
  resHdrNew.set('--s', status)
  resHdrNew.set('--ver', JS_VER)

  resHdrNew.delete('content-security-policy')
  resHdrNew.delete('content-security-policy-report-only')
  resHdrNew.delete('clear-site-data')

  if (status === 301 ||
      status === 302 ||
      status === 303 ||
      status === 307 ||
      status === 308
  ) {
    status = status + 10
  }

  return new Response(res.body, {
    status,
    headers: resHdrNew,
  })
}


/**
 * @param {URL} urlObj 
 */
function isYtUrl(urlObj) {
  return (
    urlObj.host.endsWith('.googlevideo.com') &amp;&amp;
    urlObj.pathname.startsWith('/videoplayback')
  )
}

/**
 * @param {URL} urlObj 
 * @param {number} newLen 
 * @param {Response} res 
 */
async function parseYtVideoRedir(urlObj, newLen, res) {
  if (newLen &gt; 2000) {
    return null
  }
  if (!isYtUrl(urlObj)) {
    return null
  }
  try {
    const data = await res.text()
    urlObj = new URL(data)
  } catch (err) {
    return null
  }
  if (!isYtUrl(urlObj)) {
    return null
  }
  return urlObj
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://blog.gd1214b.icu/post-images/1623120092067.png" alt="" loading="lazy"></figure>
<h2 id="4">4</h2>
<p>点击保存并部署即可。<br>
<img src="https://blog.gd1214b.icu/post-images/1623120198254.png" alt="" loading="lazy"></p>
<h2 id="5">5</h2>
<p>点击这里即可访问你搭建的反向代理网站:<br>
<img src="https://blog.gd1214b.icu/post-images/1623120299391.png" alt="" loading="lazy"><br>
如果你在搭建过程中遇到任何问题, 欢迎在下方的评论区里留言.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何评价某媒体文章《「躺平」可耻，哪来的正义感？》？躺平真的可耻吗？]]></title>
        <id>https://blog.gd1214b.icu/post/BS6mLI2Ud/</id>
        <link href="https://blog.gd1214b.icu/post/BS6mLI2Ud/">
        </link>
        <updated>2021-06-07T01:51:19.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本文转自:<a href="https://www.zhihu.com/question/460776718/answer/1911149556">https://www.zhihu.com/question/460776718/answer/1911149556</a></p>
</blockquote>
<p>什么是当前社会语境下的“躺平”，我个人的理解就是日趋觉醒的（狭义范围内的）打工人和（广义范围内的）被压榨阶级，开始用摸鱼划水“反杀”资本群体、用佛系工作态度“反向剥削”剥削阶级、用放弃理想“回怼”满身爹味的既得利益集团。</p>
<p>正如一个很自嘲的段子：“只要我在工作时间偷懒，这种既不干活又能拿工钱的行为，不也是对老板的剥削吗？”</p>
<p>形势倒逼至此，已是矛盾迫近临界之态。</p>
<h1 id=""></h1>
<p>很多油头粉面的食肉者忍不住指责或阴阳怪气的内涵当代年轻人：“不热爱劳动、不热爱奋斗！”<br>
<img src="https://blog.gd1214b.icu/post-images/1623030779063.jpg" alt="" loading="lazy"><br>
这真的是对青年群体最恶毒的污蔑了，必须首先讨论清楚劳动的问题。</p>
<p>马克思认为，“劳动本身是一种自由自觉的实践活动，人之所以为人，而非动物，很重要的一点就在于有自觉性的劳动，这是人的本质属性之一。”</p>
<p>劳动是无罪的，乃至是光荣的，我们无产阶级甚至还有自己专门的节日：五一劳动节。</p>
<p>在过去的苏联和改开之前的中国，劳动节的重要性不亚于国庆节，庆贺游行的规模盛大异常，因为这是属于国家的主人——工农阶级的政治节日。</p>
<p>曾经的五一劳动节，天安门除了城楼正中悬挂毛主席画像，广场的东侧还会摆放马克思和恩格斯的画像，广场的西侧会摆放列宁和斯大林的画像。</p>
<p>这彰示着国家的政权属性与人民主体的地位。</p>
<p>劳动人民是光荣的，劳动人民也是最受到各领域尊重和爱护的。</p>
<p>劳动，就是工农阶级的本色，也是新中国“权力为谁服务”的导向。</p>
<p>幻想不劳而获、拒绝劳动的人或心理，不仅会被社会性的群体生产所排斥，同时压根也会被自我所排斥。</p>
<p>因为任何一个心智健全的人都必须在劳动中寻找自我价值，除非他不是个正常人，比如初生的婴儿或神志不清的智力障碍人士等等，没有自我价值意识，也就没有劳动欲望。</p>
<p>一些民间俚话，所谓的“闲不住”“待不住”“操不完的心”“一辈子都是累命”……就是这个道理。</p>
<p>所以，指责“不爱劳动、不爱奋斗”，肯定首先从人的社会属性层面就说不通。</p>
<p>遁身于群体之中的个体，其贡献生产力一定是自发自觉的，这不以人的意志为转移。</p>
<h1 id="-2"></h1>
<p>那么问题就来了：明明人人爱劳动、人人需要劳动，怎么今天的打工人们却自发地要躺平了呢？</p>
<p>这在于一个本质是关乎于集体价值判断的问题：资本主义价值观的事实到来和统治，已经大大地破坏并扫除了一切单纯欲望的本源。</p>
<p>资本，会使劳动发生「异化」，它会将“追求自我价值的实现”变为“贡献剩余价值的聚集”。</p>
<p>如马克思所言：“劳动的异化性质明显的表现是：只要肉体的强制或其他强制一旦停止，人们就会像逃避鼠疫那样逃避劳动。异化的劳动，仅仅是为了生存的牺牲与折磨。”</p>
<p>这就是资本家“996是福报”、“奋斗理所应当”洗脑恶论的来源。</p>
<p>昨夜，共青团中央官博迫于某些压力，不得不亲自下场就“躺平”发声。它的意图很明显：想爹味十足地教育一番年轻人，扭转一下舆论被动局面。<br>
<img src="https://blog.gd1214b.icu/post-images/1623030826024.jpg" alt="" loading="lazy"><br>
然而，不出意料地评论区翻了车：<br>
<img src="https://blog.gd1214b.icu/post-images/1623030838006.jpg" alt="" loading="lazy"><br>
可以看看共青团的这幅海报，它列举的都是什么人：救灾救难的人民子弟兵，风雨无阻的边防戍边战士，舍生忘死的一线抗疫英雄——这些人都有什么共同点？</p>
<p>他们是为集体而拼搏、为人民大众而献身、为最广泛的国家利益而奋斗！</p>
<p>这就牵扯出了一个讨论、也是年轻人纷纷躺平的根源性缘由：我们是在为谁奋斗？是为包括自己在内的国家集体，还是为了某一个两个的资本家？</p>
<p>前者，叫做“劳动人民身先士卒当家作主”；后者，叫做“被剥削阶层甘为奴役甘为仆狗”。</p>
<p>所谓“宁当国家一颗螺丝钉，不做资本家的一株韭”。</p>
<p>观察者网马前卒曾有鼓吹：“拒绝加班，无产阶级就和先进生产力分离了”、“无产阶级如果不对自己狠一点，是没有未来的！”<br>
<img src="https://blog.gd1214b.icu/post-images/1623030868215.jpg" alt="" loading="lazy"><br>
这种论调的错误在于，它偷换乃至隐藏了“剥削剩余价值”的概念。</p>
<p>说白了就是：无产阶级所谓的“对自己狠一点”，这种“狠一点”所额外创造的利润，归了谁？</p>
<p>是归了身心俱疲（某些肝病肾病现在在996白领阶层中越来越低龄化）的自己，还是归了端坐塔尖、每天只靠着剪息票就能每秒钟净入百万的资本持有人？</p>
<p>那些财阀大佬，在今天已有一个挥之不去的特征：早已不需要参与劳动，仅仅依靠资本增殖（吃利息、投资分红）就能保持巨额财富的时时增长。</p>
<p>也就是卢梭说的：“一个巨人与一个矮子在同一条道路上行走，他们每走一步都会使巨人拉大他与矮子之间的距离”。</p>
<p>你被人勒令“拼命奋斗”，可是你在为谁奋斗？</p>
<p>年轻人自我标榜“躺平”，这实为一种无奈。</p>
<p>正如如果没有“骑手质疑饿了么变相降加班奖励”、“饿了么被曝为留骑手过春节而画大饼”、“外卖员吐槽1000元订单配送费仅5元”、“饿了么猝死员工被爆每天被扣3元”…诸如此类种种的极端压缩成本、拔高强榨剩余价值的行为，会有今年2月份饿了么骑手们的全国性大罢工吗？他们会去停止劳动、停止生产吗？<br>
<img src="https://blog.gd1214b.icu/post-images/1623030886334.jpg" alt="" loading="lazy"><br>
你若问饿了么为什么不多招点人、不停止众包模式而完善劳资关系（匹配所有的险金社保）？</p>
<p>人家资本家面对这种问题，估计能翻你一天一夜的白眼。</p>
<p>过去不久的货拉拉事件同理，你质问货拉拉平台为何不安装摄像头、不提高安全维护成本，货拉拉大boss估计要被逗乐：“还不如等到死了人，我届时再赔个钱划算呢！”</p>
<p>此前的滴滴顺风车莫不如此。</p>
<p>包括汽车巨头福特公司，曾经有过内部计算，没有投入安全设备的话，公司因为赔偿事故遇难的损失为49.5 million，而投入安全设备、修复安全隐患的总成本则为$137 million——资本果断选择了前者。</p>
<p>同理，饿了么同样不会“傻了吧唧”地多招骑手、多发奖金、多缴社保，它必须把骑手数量控制在一个“合理”的区间，既能让骑手不得不疯狂闯红灯，又能让闯红灯带来的死人风险被降到一个资本可接受的赔偿范围，最终实现GMV和利润的最大化。</p>
<p>大不了，还可以发明一个“请消费者宽容骑手”的戏码，发动无产阶级斗无产阶级，而资本则立于不败之地、两头坐收渔利。<br>
<img src="https://blog.gd1214b.icu/post-images/1623030925914.jpg" alt="" loading="lazy"><br>
如此局面下，被逼到悬崖边走投无路的骑手们，凭什么不能罢工？凭什么不能“躺平”？</p>
<p>躺平，有错乎？</p>
<h1 id="-3"></h1>
<p>昨夜共青团“教育无果”并被迫关闭评论区之后，今天又弄了个“补救措施”，继续想运用偷换概念的招数为“镇压躺平”站台：<br>
<img src="https://blog.gd1214b.icu/post-images/1623030946319.jpg" alt="" loading="lazy"><br>
我看到这一幕倒是内心毫无波澜，因为这一招率先玩出来的是谁？是他共青团中央等官媒吗？当然不。</p>
<p>不是别人，正是996福报论的发明者，马云。</p>
<p>早在2018年时，马云先生就创物垂范地为社会贡献了“996是福报”的伟大理论，从此辩论激荡绵延至今不止。<br>
<img src="https://blog.gd1214b.icu/post-images/1623030964909.jpg" alt="" loading="lazy"><br>
甚至马云先生自己都已经在人生滑铁卢中思考过往，某些人士依旧拿这位“马粑粑”的言论当做真理，乐此不疲地洗脑青年一代。</p>
<p>昨天共青团中央把钱学森等共和国国士大家搬出来的行为，和三年前的马云别无二致：直接把“国家”摆上辩论台，意图用政治正确来打压打工人：“两弹一星、核潜艇都是科学家们用996干出来的，你们这些年轻人还有不努力的理由？”</p>
<p>这叫杀人不见血。</p>
<p>用资本主义的剥削伦理去解构和解释毛主席时代的建设，这体现了一种无与伦比的统治高位的优越感，以及曲解、利用、无害化毛主席的极端卑劣。</p>
<p>两弹一星、核潜艇、大寨、杂交水稻，这些确实是无产阶级科学家和最广大工农与劳动人民群众用貌似996模式干出来的成就——但是！这些成就，造福的是谁？</p>
<p>是全体中华民族的国运福祉，它永葆了中国的边境安宁和外交地位的抬升。</p>
<p>毛主席时代的“打工人”们，所创造的“剩余价值”都交给了国家，以“全民所有制”的形式储存下来，这是同今天的互联网财阀们最大之区别所在。</p>
<p>只不过到了90年代末期，一夜之间的私有化又使得众多公立的矿山、煤田、汽车厂被以白菜价卖给民企和外资，连祖辈们的养老金都要现在的工作者来支付。</p>
<p>推荐阅读：鸡架席卷沈阳的暗面：一九九八，工人下岗</p>
<p>今时今日，抱着一堆资本主义的理儿到处灌输鸡汤的资本家们所提倡的996，利润收纳的方向仅仅是私家的公司与身价而已。</p>
<p>这是私有制语境里的付出收益论。</p>
<p>用私有制逻辑，去套述毛泽东那一代领导人、带领全国人民勒紧裤腰带的奋斗岁月，这是对社会主义公有制、对艰苦年代里那些奉献青春不求回报的无产阶级革命家的乐观主义精神最卑鄙的侮辱。</p>
<p>侮辱一个制度的目的，是为了美化和粉饰另一个制度；正如消除自己对一个制度的恐惧，是为了助长自己对鼓吹另一个制度的勇气。</p>
<h1 id="-4"></h1>
<p>躺平的表象是一种自暴自弃，但深源则是困于阶级固化的无力感。</p>
<p>我微博有粉丝的这样一条评论：<br>
<img src="https://blog.gd1214b.icu/post-images/1623030993658.jpg" alt="" loading="lazy"><br>
这种想法，实质与前文提到的马前卒的论调是极为相似的，都是理想主义的想当然所思。</p>
<p>现今，「垄断」的作用，难道看不见吗？</p>
<p>现在真要聚集一伙人，也开发一个外卖app（这不是什么难事），那结果只能是：你还没占领1/5你所在小城市的市场、日活量还没达到百人，现有的巨头财阀就会闻着味儿一手胡萝卜一手狼牙棒得来找你谈判了——“兄弟，要么我收购你，要么我大量发行代金券玩死你，你选一个吧！”</p>
<p>无产阶级拿什么和巨头斗？人家打价格战，人家打得起，你打得起吗？菜农们是怎么被社区团购那帮财阀给玩死的，还不清楚吗？</p>
<p>现在有多少小公司创业者的人生目标已经极为简单，就是被阿里腾讯收购、成为阿里腾讯附庸。</p>
<p>你还让无产阶级自己去开发生产力，怎么开发？</p>
<p>不准人家抱怨“蛋糕分不到手里”，还命令人家“有本事自己去做蛋糕啊”，可是做蛋糕的奶油、模具全都已掌握在巨头手里，你要么放弃，要么归降。</p>
<p>一没罢工权，二没扩张权，拿什么斗？</p>
<p>正因如此，某些「奋斗B」乐于跪在资本家膝下鼓吹的“你讨厌996你可以辞职啊”，这种言论完全是无解的，连初中的教科书都给出过答案：</p>
<p>“工人看似有签订契约的自由，但是他们不受雇于这个资本家，就得受雇于那个资本家，饥饿的威胁使他们无法摆脱被资本家雇佣、受资本家剥削和压榨的命运。在资本家占有生产资料的条件下，所谓雇佣双方的契约自由，对于工人来说，是徒有虚名的。”</p>
<p>“打工人”为什么会在2020年爆梗？疫情的空前打击不可忽视，中国从去年春季迎来了近年最庞大的一波企业倒闭潮和工人失业潮，更有“最苦应届毕业生”的段子流传。</p>
<p>这正应了马克思的话：“以前的中间等级的下层，即小工业家、小商人和小食利者，手工业者和农民——所有这些阶级，都降落到无产阶级的队伍里来了。”</p>
<p>僧多粥少，挤压了打工者群体就业空间的同时，也给予了资本加大剥削和“择怂录用”的底气。</p>
<p>至于这帮肆意兼并的垄断巨头是怎么产生的，这我就不多说了，说了估计炸号……就如同讨论罢工权和游行权是怎么、又是为什么在80年代被取消的一样……</p>
<p>五年前，外卖app是科技前卒；五年后，外卖功能竟然还是它的主业——用来为其金融信贷聚集用户的主业，这已经说明其科技性在下降了。</p>
<p>布雷弗曼说过：“技术的进步非但没有改变无产阶级的命运，反而成为了限制无产阶级的新枷锁。”</p>
<p>所以即便不说阶级情感，就是从生产力角度，「垄断」这种巨头形态应该被抛弃和消灭。<br>
<img src="https://blog.gd1214b.icu/post-images/1623031009807.jpg" alt="" loading="lazy"><br>
否则，就永远会造成“打工人必须匍匐在资本家胯下奋斗”、“不奋斗就没有未来”这种看似挺有道理、实际完全是颠倒社会主义分配原则的就业生态。</p>
<h1 id="-5"></h1>
<p>曾在微博见有一著名油腻食肉者的“镇压躺平”言论：<br>
<img src="https://blog.gd1214b.icu/post-images/1623031035589.jpg" alt="" loading="lazy"><br>
年轻时好好忍着被剥削，这样待到年老油腻时就可以去剥削别人了？</p>
<p>即：安心做一个被剥削者的目的，是为了有朝一日可以去当一个剥削者？</p>
<p>老老实实地“躺平”，就可以自然而然地“躺赢”吗？</p>
<p>这种思维，其实就是“吃得苦中苦，方为人上人”这句改开之后极其政治正确的话。</p>
<p>“人上人”，人身之上亦有他人，这便构筑了一个阶级分明的压迫体系：</p>
<p><img src="https://blog.gd1214b.icu/post-images/1623031049993.jpg" alt="" loading="lazy"><br>
在这样的油腻小脑中，这种阶级分明的社会状态是非常光伟正的。</p>
<p>正如所言“20来岁有个屁的剩余价值”这种直接把“价值”与“剩余价值”偷换概念的蛮语，用意自然是为了叫嚷“加班无罪”、“跪舔有理”，进而对“躺平”进行镇压和肃反。</p>
<p>恐怕1886年芝加哥大罢工之前，工人每天劳作15个小时以上这种情况，在食肉者眼里皆是“正确”的、“合理”的。</p>
<p>且不说这种观点完全是反人道，也是反社会主义、反我国宪法精神、反共和国性质的——就说其具有之相当程度的欺骗性和阴谋性：它直接隐藏了一个事实：你今天苦忍着被剥削、苦忍着打在身上的皮鞭，真的有朝一日你就可以成为手拿皮鞭的持鞭人吗？你今天点头哈腰得“吃得苦中苦”，真的有一天你就可以成为獠牙翻覆的“人上人”吗？</p>
<p>列宁导师在20世纪初就提出了一个概念：“食利阶层”：“资本主义的腐朽表现在以‘剪息票’为生的资本家这一庞大食利者阶层的形成。英、美、法、德四个先进帝国主义国家各拥有1000—1500亿法郎的有价证券资本，就是说，各国每年的收入都不少于50—80亿法郎。”</p>
<p>而迈克尔·桑德尔在公开课《公正》中则表达的更具象：“当今社会是一场高级经理人和食利者之间的赛跑，最终受损者则是在旁观赛的普通大众。”</p>
<p>那么什么是“高级经理人”？</p>
<p>列宁指出：食利阶层往往会拿出一部分利润收买无产阶级中的精英分子，使他们“资产阶级化”，成为资产阶级在无产阶级中的“代理人”。</p>
<p>这就是我们所说的“工贼”：<br>
<img src="https://blog.gd1214b.icu/post-images/1623031068063.jpg" alt="" loading="lazy"><br>
常见于今天体制内的中层油腻小老头，和体制外市场中的财阀中层领导、中小企业老板，以及一大堆精神资本家。</p>
<p>这些人往往会在既得利益的体系中由于异常会舔（今天的话术叫做情商高、眼头活、会来事；本质则是比较擅于抛弃自己原本的阶级属性）而得到一丝丝高于底层工农的甜头。</p>
<p>于是他们便会摇身一变、为身处的既得利益体系以及这份体系事实上真正的顶层吸益人，大肆摇旗呐喊、奔走鼓吹——仿佛自己也是这个体系的顶端话事人一般，而忽略了自己其实也是一个被剥削者、也有太多需要去点头哈腰的时刻的事实——不论是体制内的权力程序，还是体制外的市场程序。</p>
<p>正如许多小企业主，平时对员工颐指气使、鼓吹966奋斗论，却忘了自己完全也是市场语境下的被剥削者、在公司背后的投资人面前也得装孙子的现实。</p>
<p>还是鲁迅先生警示被压榨的年轻人警示得好哇：“做奴隶虽然不幸，但并不可怕，因为知道挣扎，毕竟还有挣脱的希望；若是从奴隶生活中寻出美来，赞叹、陶醉，就是万劫不复的奴才了！”</p>
<figure data-type="image" tabindex="1"><img src="https://blog.gd1214b.icu/post-images/1623031090165.jpg" alt="" loading="lazy"></figure>
<h1 id="-6"></h1>
<p>附一段【毛泽东警卫员李银桥 回忆录片段】</p>
<p>毛主席转身，终于望住我：“你是哪里人呢？”</p>
<p>“河北省安平县。”</p>
<p>“父母干什么呢？”</p>
<p>“我父亲种地拉脚，农闲倒腾点粮食买卖；母亲操持家务，农忙时节也下地。”</p>
<p>“我们的家庭很相像嘛。你喜欢父亲还是喜欢母亲?”</p>
<p>“喜欢母亲。我父亲脑子好，多少账也算不糊涂。可是脾气大，爱喝酒，吃饭他单独吃，他吃饼子我们啃窝头，稍不如意就打人。我母亲心善，对人好，我喜欢母亲。”</p>
<p>“越说越一致了嘛。你母亲一定信佛。”</p>
<p>“主席您怎么知道？”</p>
<p>“你说她心善，出家人慈悲为怀。”</p>
<p>我目瞪口呆。听惯了政治课，我没想到毛主席会说出这样的话。同时，我又感到与主席突然近了，紧张和拘束消失许多。我小声问:“主席，您母亲也信佛吗？”</p>
<p>“我也喜欢母亲。她也信佛，心地善良。小时候我还跟她一起去庙里烧过香呢。后来我不信了。你磕多少头，中国也强不起来，人民还是受苦。”</p>
<p>主席顿一顿，“磕头不如造反！”</p>
<p>……………<br>
<img src="https://blog.gd1214b.icu/post-images/1623031110876.jpg" alt="" loading="lazy"><br>
“人人生而平等”这句话有没有问题？没问题，但它必须还有一个配套的下半句，叫做“造反有理”。</p>
<p>也就是毛泽东1939年在延安说的：“马克思主义的道理千条万绪，归根结底就是一句话：‘造反有理’。几千年来总是说压迫有理、剥削有理，而造反无理。自从马克思主义出来，就把这个旧案翻过来了，这是个大功劳，这个道理是无产阶级从斗争中得来的，而马克思作了结论。根据这个道理，于是就反抗，就斗争，就干社会主义。”</p>
<p>没有了“造反有理”这个配套的后缀，“人人生而平等”就成了一句扯淡的空谈，且反而会成为统治阶层洗脑下层的利器，割草都是割得润物无声。<br>
<img src="https://blog.gd1214b.icu/post-images/1623031128736.jpg" alt="" loading="lazy"><br>
<img src="https://blog.gd1214b.icu/post-images/1623031138198.jpg" alt="" loading="lazy"><br>
刘建宏曾直言不讳地说过这样一段话：“你说我们是利益既得者吗？我想我们是。我们之前的人相对来说好动摇，他虽然挡在你面前，你稍微动一动，他就让位了。但是后面的人要想让我去让位，不是很容易。这个事我跟（白）岩松探讨过很长时间，我说你看到你后面的威胁了吗？他说真没看到，我说，我也没看到。”</p>
<p>那么此时，羸弱的“草”们所能做的，也就是“躺平”了。</p>
<h1 id="跋">跋</h1>
<p>从“丧文化”到“佛系”，从“沙雕”到“打工人”，下游的被压榨群体们在互联网上不断地寻找着共鸣、创造着新词。</p>
<p>或是集体颓唐，或是集体装疯卖傻……总之，他们心里都是很清楚的：活着很苦，苦中作乐得了。</p>
<p>5月初，已然颇具政治危机、社会维稳要务之势的七普数据，在官方此前连续用韩国、日本、美国等国的人口形势来给民众“做足思想准备”之后，终于出炉。</p>
<p>数据显示：年轻人不愿意生孩子了，连带着的还包括婚姻抵触、恋爱抵触、社交抵触。</p>
<p>这又何尝不也是一种“躺平”？</p>
<p>教育成本、购房成本、996剥削、延迟退休……试问拿什么来遏制“躺平”？又有什么理由去指责“躺平”？</p>
<p>很多时候不禁想问：拼多多还要再跳楼几人？马云外滩宣战演讲还要再来几场？十八大之前那帮在舆论场舞动话筒的高校公知教授和直到今天都老而不死的HS一代，以及贾浅浅炫耀权力一般的“屎尿屁文学”，还嫌不够？</p>
<p>底层愈发内卷，高层愈发稳固。</p>
<p>90后们今天无可奈何的“躺平”，难道不是对一百年前同是一群“90后”的革命先辈们用2000万牺牲规模才换来一个社会主义新中国的血泪革命史的一种讽刺吗？</p>
<p>“建立新中国死了多少人，有谁想过这个问题？我是想过的！” ——毛泽东。</p>
<p>“只有群众的革命斗争，才能使工人生活和国家管理真正有所改善。无论有教养的人怎样‘同情’工人，无论单个恐怖分子怎样英勇斗争，都不能摧毁沙皇专制制度和资本家专横势力。只有工人自己起来斗争只有千百万群众共同斗争才能做到这一点——而当这种斗争减弱下去的时候，工人所争得的成果立刻就开始被夺回去。俄国的革命证实了国际歌中的一段歌词：‘从来就没有什么救世主，也不靠神仙皇帝。要创造人类的幸福，全靠我们自己！’” ——列宁。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数字证书及 CA 的扫盲介绍]]></title>
        <id>https://blog.gd1214b.icu/post/SbNCYJUBm/</id>
        <link href="https://blog.gd1214b.icu/post/SbNCYJUBm/">
        </link>
        <updated>2021-05-28T10:26:54.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本文转自:<a href="https://program-think.blogspot.com/2010/02/introduce-digital-certificate-and-ca.html">https://program-think.blogspot.com/2010/02/introduce-digital-certificate-and-ca.html</a></p>
</blockquote>
<h1 id="先说一个通俗的例子">先说一个通俗的例子</h1>
<h2 id="普通的介绍信">普通的介绍信</h2>
<p>想必大伙儿都听说过介绍信的例子吧？假设 A 公司的张三先生要到 B 公司去拜访，但是 B 公司的所有人都不认识他，他咋办捏？常用的办法是带公司开的一张介绍信，在信中说：兹有张三先生前往贵公司办理业务，请给予接洽......云云。然后在信上敲上A公司的公章。<br>
　　张三先生到了 B 公司后，把介绍信递给 B 公司的前台李四小姐。李小姐一看介绍信上有 A 公司的公章，而且A公司是经常和 B 公司有业务往来的，这位李小姐就相信张先生不是歹人了。<br>
　　说到这，爱抬杠的同学会问了：万一公章是伪造的，咋办捏？在此，俺要先声明，在本例子中，先假设公章是难以伪造滴，否则俺的故事没法说下去鸟。</p>
<h2 id="引入中介机构的介绍信">引入中介机构的介绍信</h2>
<p>好，回到刚才的话题。如果和 B 公司有业务往来的公司很多，每个公司的公章都不同，那前台就要懂得分辨各种公章，非常滴麻烦。所以，有某个中介公司 C，发现了这个商机。C公司专门开设了一项“代理公章”的业务。<br>
　　今后，A 公司的业务员去B公司，需要带2个介绍信：<br>
　　介绍信1<br>
　　含有 C 公司的公章及 A 公司的公章。并且特地注明：C 公司信任A公司。<br>
　　介绍信2<br>
　　仅含有 A 公司的公章，然后写上：兹有张三先生前往贵公司办理业务，请给予接洽......云云。</p>
<p>某些不开窍的同学会问了，这样不是增加麻烦了吗？有啥好处捏？<br>
　　主要的好处在于，对于接待公司的前台，就不需要记住各个公司的公章分别是啥样子的；他/她只要记住中介公司 C 的公章即可。当他/她拿到两份介绍信之后，先对“介绍信1”的 C 公章，验明正身；确认无误之后，再比对“介绍信1”和“介绍信2”的两个 A 公章是否一致。如果是一样的，那就可以证明“介绍信2”是可以信任的了。</p>
<h1 id="相关专业术语的解释">相关【专业术语】的解释</h1>
<p>费了不少口水，终于说完了一个俺自认为比较通俗的例子。如果你听到到这儿，还是想不明白这个例子在说啥，那后续的内容，就不必浪费时间听了 😦<br>
　　下面，俺就着上述的例子，把相关的名词，作一些解释。</p>
<h2 id="证书是啥">“证书”是啥？</h2>
<p>“证书”洋文也叫“digital certificate”或“public key certificate”<br>
　　它是用来证明某某东西确实是某某东西的东西（是不是像绕口令？）。通俗地说，证书就好比例子里面的公章。通过公章，可以证明该介绍信确实是对应的公司发出的。<br>
　　理论上，人人都可以找个证书工具，自己做一个证书。那如何防止坏人自己制作证书出来骗人捏？请看后续 CA 的介绍。</p>
<h2 id="ca是啥">“CA”是啥？</h2>
<p>CA 是“Certificate Authority”的缩写，也叫“证书授权中心”。<br>
　　它是负责管理和签发证书的第三方机构，就好比例子里面的中介——C 公司。一般来说，CA 必须是所有行业和所有公众都信任的、认可的。因此它必须具有足够的权威性。就好比A、B两公司都必须信任 C 公司，才会找 C 公司作为公章的中介。</p>
<h2 id="ca-证书是啥">“CA 证书”是啥？</h2>
<p>CA 证书，顾名思义，就是CA颁发的证书。<br>
　　前面已经说了，人人都可以找工具制作证书。但是你一个小破孩制作出来的证书是没啥用处的。因为你【不是】权威的 CA 机关，你自己搞的证书不具有权威性。<br>
　　这就好比上述的例子里，某个坏人自己刻了一个公章，盖到介绍信上。但是别人一看，不是【受信任】的中介公司的公章，就不予理睬。坏蛋的阴谋就不能得逞啦。<br>
　　文本后续提及的证书，若无特殊说明，均指 CA 证书。</p>
<h2 id="啥是证书之间的信任关系">啥是证书之间的【信任关系】？</h2>
<p>在俺的例子里谈到，引入中介后，业务员要同时带两个介绍信。第一个介绍信包含了两个公章，并注明，公章C信任公章A。证书间的信任关系，就和这个类似。就是用一个证书来证明另一个证书是真实可信滴。</p>
<h2 id="啥是证书的信任链">啥是证书的【信任链】？</h2>
<p>实际上，证书之间的信任关系，是可以嵌套的。比如，C 信任 A1，A1 信任 A2，A2 信任 A3......这个叫做证书的信任链。只要你信任链上的头一个证书，那后续的证书，都是可以信任滴。</p>
<h2 id="啥是根证书">啥是【根证书】？</h2>
<p>“根证书”的洋文叫“root certificate”。为了说清楚根证书是咋回事，再来看个稍微复杂点的例子。<br>
　　假设 C 证书信任 A 和 B；然后 A 信任 A1 和 A2；B 信任 B1 和 B2。则它们之间，构成如下的一个树形关系（一个倒立的树）。<br>
<img src="https://blog.gd1214b.icu/post-images/1622197859502.png" alt="" loading="lazy"></p>
<p>处于最顶上的树根位置的那个证书，就是“根证书”。除了根证书，其它证书都要依靠上一级的证书，来证明自己。那谁来证明“根证书”可靠捏？实际上，根证书自己证明自己是可靠滴（或者换句话说，根证书是不需要被证明滴）。<br>
　　聪明的同学此刻应该意识到了：根证书是整个证书体系安全的根本。所以，如果某个证书体系中，根证书出了问题（不再可信了），那么所有被根证书所信任的其它证书，也就不再可信了。这个后果是相当相当滴严重（简直可以说是灾难性的）。</p>
<h1 id="证书有啥用">证书有啥用？</h1>
<p>CA 证书的作用有很多，俺为了节省口水，只列出常用的几个。</p>
<h2 id="验证网站是否可信针对-https">验证网站是否可信（针对 HTTPS）</h2>
<p>通常，我们如果访问某些敏感的网页（比如用户登录的页面），其协议都会使用 HTTPS 而不是 HTTP。因为 HTTP 协议是明文的，一旦有坏人在偷窥你的网络通讯，他/她就可以看到网络通讯的内容（比如你的密码、银行帐号、等）；而 HTTPS 是加密的协议，可以保证你的传输过程中，坏蛋无法偷窥。<br>
　　但是，千万【不要】以为，HTTPS 协议有了加密，就可高枕无忧了。俺再举一个例子来说明，光有加密是不够滴。假设有一个坏人，搞了一个假的网银的站点，然后诱骗你上这个站点。假设你又比较单纯，一不留神，就把你的帐号，口令都输入进去了。那这个坏蛋的阴谋就得逞鸟。<br>
　　为了防止坏人这么干，HTTPS 协议除了有加密的机制，还有一套证书的机制。通过证书来确保，某个站点确实就是某个站点。<br>
　　有了证书之后，当你的浏览器在访问某个 HTTPS 网站时，会验证该站点上的 CA 证书（类似于验证介绍信的公章）。如果浏览器发现该证书没有问题（证书被某个根证书信任、证书上绑定的域名和该网站的域名一致、证书没有过期），那么页面就直接打开；否则的话，浏览器会给出一个警告，告诉你该网站的证书存在某某问题，是否继续访问该站点？为了形象起见，下面给出 IE 和 Firefox 的抓图：<br>
<img src="https://blog.gd1214b.icu/post-images/1622197913198.png" alt="" loading="lazy"><br>
<img src="https://blog.gd1214b.icu/post-images/1622197930063.png" alt="" loading="lazy"></p>
<p>大多数知名的网站，如果用了 HTTPS 协议，其证书都是可信的（也就不会出现上述警告）。所以，今后你如果上某个知名网站，发现浏览器跳出上述警告，你就要小心啦！</p>
<h2 id="验证某文件是否可信是否被篡改">验证某文件是否可信（是否被篡改）</h2>
<p>证书除了可以用来验证某个网站，还可以用来验证某个文件是否被篡改。具体是通过证书来制作文件的数字签名。制作数字签名的过程太专业，咱就不说了。后面专门告诉大家如何验证文件的数字签名。考虑到大多数人用 Windows 系统，俺就拿 Windows 的例子来说事儿。<br>
　　比如，俺手头有一个 Firefox 的安装文件（带有数字签名）。当俺查看该文件的属性，会看到如下的界面。眼神好的同学，会注意到到上面有个“数字签名”的标签页。如果没有出现这个标签页，就说明该文件没有附带数字签名。<br>
<img src="https://blog.gd1214b.icu/post-images/1622197973986.png" alt="" loading="lazy"></p>
<p>选择该标签页，看到如下界面。<br>
　　顺便说一下，某些数字签名中没有包含“邮件地址”，那么这一项会显示“不可用”；同样的，某些数字签名没有包含“时间戳”，也会显示“不可用”。不要紧张，这里显示的“不可用”跟数字签名的有效性【没关系】。<br>
<img src="https://blog.gd1214b.icu/post-images/1622197996715.png" alt="" loading="lazy"></p>
<p>一般来说，签名列表中，有且仅有一个签名。选中它，点“详细信息”按钮。跳出如下界面：<br>
　　通常这个界面会显示一行字：“该数字签名正常”（图中红圈标出）。如果有这行字，就说明该文件从出厂到你手里，中途没有被篡改过（是原装滴、是纯洁滴）。<br>
<img src="https://blog.gd1214b.icu/post-images/1622198010703.png" alt="" loading="lazy"></p>
<p>如果该文件被篡改过了（比如，感染了病毒、被注入木马），那么对话框会出现一个警告提示“该数字签名无效”（图中红圈标出）。界面如下：<br>
<img src="https://blog.gd1214b.icu/post-images/1622198028435.png" alt="" loading="lazy"><br>
　　不论签名是否正常，你都可以点“查看证书”按钮。这时候，会跳出证书的对话框。如下：<br>
<img src="https://blog.gd1214b.icu/post-images/1622198041625.png" alt="" loading="lazy"><br>
<img src="https://blog.gd1214b.icu/post-images/1622198052027.png" alt="" loading="lazy"></p>
<p>从后一个界面，可以看到俺刚才说的证书信任链。图中的信任链有3层：<br>
第1层是根证书（Thawte Premium Server CA）<br>
第2层是 Thawte 专门用来签名的证书<br>
第3层是 Mozilla 自己的证书</p>
<p>目前大多数知名的公司（或组织机构），其发布的可执行文件（比如软件安装包、驱动程序、安全补丁），都带有数字签名。你可以自己去看一下。<br>
　　建议大伙儿在安装软件之前，都先看看是否有数字签名？如果有，就按照上述步骤验证一把。一旦数字签名是坏的，那可千万别装。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[对比4种强化域名安全的协议——DNSSEC，DNSCrypt，DNS over TLS，DNS over HTTPS]]></title>
        <id>https://blog.gd1214b.icu/post/ee3pG-Qog/</id>
        <link href="https://blog.gd1214b.icu/post/ee3pG-Qog/">
        </link>
        <updated>2021-05-21T13:19:46.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本文转自:<a href="https://program-think.blogspot.com/2018/10/Comparison-of-DNS-Protocols.html">https://program-think.blogspot.com/2018/10/Comparison-of-DNS-Protocols.html</a></p>
</blockquote>
<h1 id="引子">引子</h1>
<p>俺在写前一篇博文（也就是 <a href="https://program-think.blogspot.com/2018/09/Why-You-Should-Switch-from-Chrome-to-Firefox.html">Firefox PK Chrome</a> 那篇）的时候，碰巧看到 Mozilla 官方博客提到说：目前最新的 Firefox 62 版本开始支持【DNS over HTTPS】这一特性（链接在“<a href="https://blog.nightly.mozilla.org/2018/06/01/improving-dns-privacy-in-firefox/">这里</a>”）。<br>
　　本来想顺便聊一下“DNS over HTTPS”这个玩意儿。但是查了一下，发现它的 RFC 目前还只是【草案】，尚未正式发布。<br>
　　所以俺就把本文的主题改成：对比4种强化 DNS 安全的网络协议。然后借此机会普及一些信息安全知识。</p>
<h1 id="dns-是啥玩意儿">DNS 是啥玩意儿？</h1>
<p>简而言之，DNS 是用来查询域名的协议。关于它的原理（工作机制），俺已经写过一篇教程（在“<a href="https://program-think.blogspot.com/2014/01/dns.html">这里</a>”），所以今天就不重复浪费口水啦。<br>
　　另外，如果你是技术菜鸟，在看这篇博文之前，确保你已经【看完】如下这篇：<br>
<a href="https://program-think.blogspot.com/2021/03/Computer-Networks-Overview.html">《计算机网络通讯的【系统性】扫盲——从“基本概念”到“OSI 模型”》</a></p>
<h1 id="传统的-dns-有啥问题">传统的 DNS 有啥问题？</h1>
<p>传统的 DNS 是一个【比较古老】的协议。最早的草案可以追溯到1983年。1987年定稿之后，基本上没啥变化。算起来，它的年龄比俺博客的很多读者都要大。<br>
　　设计 DNS 的时候，互联网基本上还是个玩具。那年头的互联网协议，压根儿都没考虑安全性，DNS 当然也不例外。所以 DNS 的交互过程全都是【明文】滴，既无法做到“保密性”，也无法实现“完整性”。<br>
　　缺乏“保密性”就意味着——任何一个能【监视】你上网流量的人，都可以【看到】你查询了哪些域名。直接引发的问题就是隐私风险。<br>
　　缺乏“完整性”就意味着——任何一个能【修改】你上网流量的人，都可以【篡改】你的查询结果。直接引发的问题就是“DNS 欺骗”（也叫“DNS 污染”或“DNS 缓存投毒”）<br>
　　<br>
　　为了解决传统 DNS 的这些弊端，后来诞生了好几个网络协议，以强化域名系统的安全性。俺挑选其中4个来介绍。除了这4个，其它一些协议的名气和影响力太小，不值一提。<br>
　　下面俺以出场时间的先后，分别介绍这4个协议。</p>
<h1 id="dnssec">DNSSEC</h1>
<h2 id="历史">历史</h2>
<p>这玩意儿是“Domain Name System Security Extensions”的缩写。在今天介绍的4个协议中，DNSSEC 是最早诞生的（1997）。从最先的 RFC 2065 进化为 RFC 2535，再到 RFC 4033、RFC 4034、RFC 4035。<br>
　　在今天介绍的4个协议中，DNSSEC 也是最早大规模部署的。在2010年的时候，所有根域名服务器都已经部署了 DNSSEC。到了2011年，若干顶级域名（.org 和 .com 和 .net 和 .edu）也部署了 DNSSEC。</p>
<h2 id="协议栈">协议栈</h2>
<pre><code>--------
DNSSEC
--------
UDP
--------
IP
--------
</code></pre>
<h2 id="安全性的原理">安全性的原理</h2>
<p>当初设计 DNSSEC 的一个考虑是“尽可能兼容 DNS 协议”。所以 DNSSEC 只是在 DNS 协议的基础上增加了一个【数字签名机制】。<br>
　　有了数字签名，如果域名查询的结果被人篡改了，DNSSEC 客户端就可以通过【校验签名】，判断查询结果是假的。套用信息安全的行话——DNSSEC 实现了【完整性】（也叫“不可篡改性”）。<br>
　　由于 DNSSEC 引入了【数字签名】，就需要有【公私钥对】。私钥是保密的，用来生成签名；公钥是公开的，用来验证签名。DNSSEC 客户端可以向 DNSSEC 服务器发出请求，获得一个 DNSKEY 记录，里面含公钥；然后用这个公钥校验每次的查询结果。</p>
<h2 id="信任链的实现">信任链的实现</h2>
<p>有些聪明的读者会问了：DESSEC 客户端在向服务器请求公钥的过程中，如果被攻击者篡改了，得到一个假的公钥，那该如何是好？<br>
　　为了解决此问题，DNSSEC 体系要求【上级域】来担保。比如想要证明 program-think.blogspot.com 这个域名的公钥是否可信，就依靠 blogspot.com 这个域名的公钥来验证。通过层层追溯，最后达到【根域名服务器】。而“根域名服务器的公钥”是事先就部署在客户端的——这玩意儿就是整个信任链的根源，称之为“信任锚”（洋文叫“Trust Anchor”）。</p>
<h2 id="优点">优点</h2>
<p>在今天聊的4个协议中，DNSSEC 应该是最成熟的。除了前面提到的广泛部署，大多数公共的域名服务器也都支持它。维基百科上有一个对照表（链接在“<a href="https://en.wikipedia.org/wiki/Public_recursive_name_server">这里</a>”），对比了有名气的几个公共域名服务系统。在今天聊的4个协议中，支持 DNSSEC 的最多。</p>
<h2 id="缺点">缺点</h2>
<p>虽然 DNSSEC 最成熟，但它有个天生的缺陷——【没有】考虑到【保密性】。<br>
　　DNSSEC 虽然对传输的数据做了数字签名，但是【没有】进行加密。这就意味着——任何能监视你网络流量的人，也可以看到你通过 DNSSEC 查询了哪些域名。隐私风险大大滴！<br>
　　Chrome 曾经在 14 版本支持过 DNSSEC，后来又【移除】了；而 Firefox 官方从未支持过 DNSSEC 协议。俺猜测：大概就是这个缺点给闹的。</p>
<h1 id="dnscrypt">DNSCrypt</h1>
<h2 id="历史-2">历史</h2>
<p>第2个出场的是 DNSCrypt。这个协议是由 Frank Denis 和 Yecheng Fu（付业成）两人设计的。<br>
　　这个协议从来【没有】提交过 RFC（征求意见稿），要想看它的协议实现，只能去它的官网（链接在“<a href="https://dnscrypt.info/protocol/">这里</a>”）。<br>
　　历史上有过两个版本，分别称：Version 1 和 Version 2。如今主要使用“版本2”</p>
<h2 id="协议栈-2">协议栈</h2>
<pre><code>----------------
DNSCrypt
----------------
TCP or UDP
----------------
IP
----------------
</code></pre>
<h2 id="安全性的原理-2">安全性的原理</h2>
<p>前面俺提到 DNSSEC 协议强调兼容性。而 DNSCrypt 则完全是另起炉灶搞出来的协议。在这个协议中，域名的“查询请求”与“响应结果”都是加密的。这就是它比 DNSSEC 高级的地方。<br>
　　换句话说，DNSCrypt 既能做到【完整性】，也能做到【保密性】；相比之下，DNSSEC 只能做到【完整性】。</p>
<h2 id="信任链的实现-2">信任链的实现</h2>
<p>DNSCrypt 的信任链比较简单——客户端要想使用哪个 DNSCrypt 服务器，就需要预先部署该服务器的公钥。<br>
　　另外，DNSCrypt 还支持客户端认证（作为可选项）。如果需要的话，可以在服务器上部署客户端的公钥。此时，服务器只接受可信的客户端的查询请求。</p>
<h2 id="优点-2">优点</h2>
<p>如前所述，DNSCrypt 同时支持【完整性】与【保密性】。在隐私方面完胜 DNSSEC。<br>
　　在下层协议方面，DNSCrypt 同时支持 TCP 和 UDP，显然比 DNSSEC 灵活（DNSSEC 只支持 UDP）。<br>
　　顺便提醒一下：虽然 DNSCrypt 协议默认使用 443 这个端口号，但该协议与 HTTPS 毫无关系。</p>
<h2 id="缺点-2">缺点</h2>
<p>（俺个人认为）DNSCrypt 最大的缺点就是前面提到的：【从未】提交过 RFC。没有 RFC 也就无法通过 IETF（互联网工程任务组）进行标准化。一个无法标准化的协议，其生命力要打很大的折扣。<br>
　　另一个比较小的缺点是——虽然 DNSCrypt 协议是加密的，但可以被识别出来。换句话说：如果有人监控你的流量，可以识别出哪些流量属于 DNSCrypt 协议。为啥说这是个缺点捏？在本文末尾讨论 “DNSCrypt 与 TLS 的安全性对比” 的时候，会详细加以说明。<br>
　　再来说说【公共 DNS 系统】。截至俺写本文时，Google 和 Cloudflare 的公共域名系统【尚未】支持 DNSCrypt（参见<a href="https://en.wikipedia.org/wiki/Public_recursive_name_server">这个页面</a>的对照表）。这也是一个缺点。</p>
<h1 id="dns-over-tls">DNS over TLS</h1>
<p>“DNS over TLS”有时也被简称为【DoT】。为了打字省力，本文以下部分用 DoT 来称呼之。</p>
<h2 id="历史-3">历史</h2>
<p>DoT 已经正式发布了 RFC（参见 RFC 7858 和 RFC 8310）。<br>
　　从时间上看，RFC7858 是2016年发布的，RFC8310 是今年（2018）发布的；显然，这个协议出现得比较晚（相比前面提到的 DNSSEC 和 DNSCrypt）。</p>
<h2 id="协议栈-3">协议栈</h2>
<pre><code>--------
DoT
--------
TLS
--------
TCP
--------
IP
--------
</code></pre>
<h2 id="安全性的原理-3">安全性的原理</h2>
<p>顾名思义，DNS over TLS 就是基于 TLS 隧道之上的域名协议。由于 TLS 本身已经实现了【保密性】与【完整性】，因此 DoT 自然也就具有这两项特性。<br>
　　至于 TLS 协议是如何实现完整性与保密性滴？可以参见俺的系列博文：<a href="https://program-think.blogspot.com/2014/11/https-ssl-tls-0.html">《扫盲 HTTPS 和 SSL/TLS 协议》</a></p>
<h2 id="信任链的实现-3">信任链的实现</h2>
<p>DoT 的信任链依赖于 TLS，而 TLS 的信任链靠的是 CA 证书体系。<br>
　　关于 CA 证书体系，可以参见8年前的博文：<a href="https://program-think.blogspot.com/2010/02/introduce-digital-certificate-and-ca.html">《数字证书及 CA 的扫盲介绍》</a></p>
<h2 id="优点-3">优点</h2>
<p>相比 DNSSEC，DoT 具备了【保密性】；相比 DNSCrypt，DoT 已经标准化。<br>
　　另外，由于 DoT 协议是完全包裹在 TLS 里面，即使有人监视你的上网流量，也无法判断——哪些 TLS 流量是用于域名查询，哪些 TLS 用于网页传输。换句话说，DoT 协议的流量无法被【单独识别】出来。</p>
<h2 id="缺点-3">缺点</h2>
<p>支持 DoT 的客户端还不够多。尤其是主流的浏览器还没有计划增加 DoT 的支持。</p>
<h1 id="dns-over-https">DNS over HTTPS</h1>
<p>“DNS over HTTPS”有时也被简称为【DoH】。为了打字省力，本文以下部分用 DoH 来称呼之。</p>
<h2 id="历史-4">历史</h2>
<p>在今天介绍的4个协议中，DoH 是最新的（最晚出现的）。RFC 方面，它已经有了相应的草案，但还【没有】正式发布。截至俺写本文时，DoH 的草案已经发了 15 个版本（从 00 到 14），最新版的链接在“<a href="https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-14">这里</a>”。<br>
　　很多人把 DoH 与 DoT 混为一谈，实际上这是两种不同的协议。你可以对比这两者的协议栈，（只要你眼睛不瞎）就可看出其中的差别。</p>
<h2 id="协议栈-4">协议栈</h2>
<pre><code>--------
DoH
--------
HTTP
--------
TLS
--------
TCP
--------
IP
--------
</code></pre>
<h2 id="安全性的原理-4">安全性的原理</h2>
<p>顾名思义，DNS over HTTPS 就是基于 HTTPS 隧道之上的域名协议。而 HTTPS 又是“HTTP over TLS”。所以 DoH 相当于是【双重隧道】的协议。<br>
　　与 DoT 类似，DoH 最终也是依靠 TLS 来实现了【保密性】与【完整性】。<br>
　　至于 TLS 协议是如何实现完整性与保密性滴？可以参见俺的系列博文：<a href="https://program-think.blogspot.com/2014/11/https-ssl-tls-0.html">《扫盲 HTTPS 和 SSL/TLS 协议》</a></p>
<h2 id="信任链的实现-4">【信任链】的实现</h2>
<p>DoH 类似于 DoT，最终是靠 TLS 所使用的“CA 证书体系”来实现信任链。<br>
　　关于 CA 证书体系，可以参见8年前的博文：<a href="https://program-think.blogspot.com/2010/02/introduce-digital-certificate-and-ca.html">《数字证书及 CA 的扫盲介绍》</a></p>
<h2 id="优点-4">优点</h2>
<p>基本上，DoT 具备的优点，DoH 也具备。<br>
　　相比 DoT，DoH 还多了一个优点：<br>
　　由于 DoH 是基于 HTTP 之上。而主流的编程语言都有成熟的 HTTP 协议封装库；再加上 HTTP 协议的使用本身很简单。因此，要想用各种主流编程语言开发一个 DoH 的客户端，是非常容易滴。</p>
<h2 id="缺点-4">缺点</h2>
<p>如前所述，DoH 目前还只有 RFC 的草案，尚未正式发布。这算是一个缺点。<br>
　　相比 DoT，DoH 还有一个小缺点——由于 DoH 比 DoT 多了一层（请对比两者的协议栈），所以在性能方面，DoH 会比 DoT 略差。为啥说这是个【小】缺点捏？因为域名的查询并【不】频繁，而且客户端软件可以很容易地对域名的查询结果进行【缓存】（以降低查询次数）。所以 DoH 比 DoT 性能略差，无伤大雅。</p>
<h1 id="4种协议的综合对照表">4种协议的综合对照表</h1>
<p>为了给列位看官一个直观的印象，放一个综合的对照表。<br>
<img src="https://blog.gd1214b.icu/post-images/1621680391731.png" alt="" loading="lazy"></p>
<h1 id="为啥-dns-over-https-更有前途谈谈俺个人观点">为啥 DNS over HTTPS 更有前途？——谈谈俺个人观点</h1>
<p>接着来聊一下：4个协议中，谁的前景最看好？（以下是俺个人观点，仅供参考）</p>
<h2 id="首先排除dnssec">首先【排除】DNSSEC</h2>
<p>如果要讨论这4种协议的优劣，首先【出局】的是 DNSSEC。因为这玩意儿连【保密性】都不具备，无法保护网民的隐私。相比之下，另外三种协议都具备了“保密性”。<br>
　　（注：DNSSEC 具备“完整性”，不具备“保密性”）</p>
<h2 id="dnscrypt-与-tls-的对比">DNSCrypt 与 TLS 的对比</h2>
<p>DoT 与 DoH 这两个协议，本质上都是依赖 TLS 来保证安全性（完整性＆保密性）。所以剩下三种协议的对比，首先是 DNSCrypt 与 TLS 之间的 PK。<br>
　　俺认为 TLS 具有如下几个优势：<br>
　　优势1——关于“标准化”<br>
　　SSL/TLS 老早就已经标准化了，距今已超过20年。（关于 SSL/TLS 版本的演变历史，可以参见这篇博文）<br>
　　而 DNSCrypt 发布这么多年，连 RFC 都没有提交过——这玩意儿看来【没希望】成为互联网标准了。</p>
<p>优势2——关于“客户端部署”<br>
　　TLS 的公钥体系（CA 证书体系）早就已经普及。所有主流的操作系统都内置了一系列 CA 根证书。<br>
　　相比之下，DNSCrypt 另起炉灶搞了一套公钥机制，只有它自己在用。<br>
　　所以，在【部署客户端】的时候，DNSCrypt 会比 TLS 麻烦。虽然某些 DNSCrypt 的客户端已经内置了一些知名的公共服务器的公钥，但如果你要切换到另一个 DNSCrypt 服务器，并且该服务器的公钥没有内置在客户端里面，那你就需要手动部署。</p>
<p>优势3——关于“协议识别”<br>
　　这个话题前面已经谈过了。此处再重复唠叨一下。<br>
　　如果网络流量被监控，监控者可以根据协议特征，把 DNSCrypt 识别出来；而 DoT 与 DoH，在流量外观上，与其它的 TLS 流量【毫无差异】。也就是说，监控流量的人，无法判断某个 TLS 流量是否属于 DoT 或 DoH。<br>
　　综上所述，TLS 完胜 DNSCrypt。所以，剩下的协议就只有 DoT 与 DoH。</p>
<h2 id="dot-vs-doh">DoT VS DoH</h2>
<p>前面谈 DoH 优缺点的时候，其实已经可以看出这两者谁更有前途了。<br>
　　DoT 因为协议栈少了一层，性能会比 DoH 更好。但是俺前面也说了，域名查询的频度是比较低的，而且还可以利用客户端软件的【DNS 缓存】，进一步减少域名查询的频度。所以 DoT 虽然性能更好，但优势不明显。</p>
<p>DoH 的强项体现在如下几方面：<br>
　　1. 编程接口更简单<br>
　　（关于这点，前面提到过）这是个很重要的优势——有助于让更多软件切换到 DoH 之上。</p>
<p>2. 可以利用 HTTP 协议已有的特性<br>
　　由于 DoH 是基于 HTTPS 之上，可以无缝地支持 Proxy；<br>
　　DoH 可以充分利用 HTTP 2.0 的特性（HTTP/2 在 HTTP/1.1 基础上加了很多功能）。</p>
<p>正是因为 DoH 的这些优势，浏览器厂商对 DoH 的支持更积极。对比一下就可以看出来——DoT 在两年前（2016）正式发布 RFC，主流的浏览器没一个支持；而 DoH 目前才仅仅是 RFC 草案，Firefox 与 Chrome/Chromium 都开始支持了。</p>
<h2 id="小结">小结</h2>
<p>经过层层淘汰，目前看下来最有前途的应该 DoH（DNS over HTTPS）。<br>
　　DoH 未来的发展势头取决于如下几点：</p>
<ol>
<li>标准化的时间进度（看目前的架势，正式发布应该快到了）</li>
<li>其它浏览器跟进的速度</li>
</ol>
<h1 id="对-doh-的进一步讨论">对 DoH 的进一步讨论</h1>
<h2 id="引申阅读">引申阅读</h2>
<p>分享几篇 DoH 相关的文章：</p>
<p><a href="https://hacks.mozilla.org/2018/05/a-cartoon-intro-to-dns-over-https/">《A cartoon intro to DNS over HTTPS》</a><br>
（注：这是 Mozilla 官方博客的一篇文章，深入浅出地扫盲了 DNS 和 DoH 的原理）</p>
<p><a href="https://bitsup.blogspot.com/2018/05/the-benefits-of-https-for-dns.html">《The Benefits of HTTPS for DNS》</a><br>
（注：这是某个老外写的技术文章，讨论 DoH 可以借助 HTTP 协议的哪些好处）</p>
<h2 id="关于浏览器的说明">关于浏览器的说明</h2>
<p>Firefox<br>
　　Firefox 从 62 版本开始支持 DoH，具体参见 Mozilla 官方博客（链接在“<a href="https://blog.nightly.mozilla.org/2018/06/01/improving-dns-privacy-in-firefox/">这里</a>”）。<br>
　　由于 DoH 功能刚刚加入，还没有提供相应的配置界面。如果你想体验该功能，需要定制 Firefox 的配置选项（Preferences）以初始化 DoH 的相关参数。定制 Firefox 的方法参见博文：<a href="https://program-think.blogspot.com/2019/07/Customize-Firefox.html">《扫盲 Firefox 定制——从“user.js”到“omni.ja”》</a></p>
<p>Chrome/Chromium<br>
　　Chrome/Chromium 从 66 版本开始支持 DoH。具体参见 Chromium 官网的 issue（链接在“<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=799753">这里</a>”）。</p>
<p>虽然 Firefox 和 Chrome/Chromium 都已经开始支持 DoH，但大伙儿别急着用。<br>
　　按照历史经验，刚加入的新功能，可能还不够稳定，没准儿还存在未曝光的安全漏洞。多等几个版本之后再说。</p>
<h2 id="相关的客户端工具">相关的客户端工具</h2>
<p>在 curl 官方的代码仓库，有一个<a href="https://github.com/curl/curl/wiki/DNS-over-HTTPS#doh-tools">关于 DoH 的 wiki 页面</a>，里面列出了一些 DoH 的客户端小工具。<br>
　　喜欢折腾技术的同学，可以先去玩一玩。</p>
<p>因为 DoH 的标准还没有正式发布，关于它的讨论就到此为止。等到啥时候发布了，俺再专门发一篇 DoH 如何使用的博文。</p>
]]></content>
    </entry>
</feed>